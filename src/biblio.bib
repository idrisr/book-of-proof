@inproceedings{10.1145/2808098.2808099,
  title = {Type-Level Web {{APIs}} with {{Servant}}: An Exercise in Domain-Specific Generic Programming},
  booktitle = {Proceedings of the 11th {{ACM SIGPLAN}} Workshop on Generic Programming},
  author = {Mestanogullari, Alp and Hahn, Sönke and Arni, Julian K. and Löh, Andres},
  date = {2015},
  series = {Wgp 2015},
  pages = {1--12},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2808098.2808099},
  url = {https://doi.org/10.1145/2808098.2808099},
  abstract = {We describe the design and motivation for Servant, an extensible, type-level DSL for describing Web APIs. Servant APIs are Haskell types. An API type can be interpreted in several different ways: as a server that processes requests, interprets them and dispatches them to appropriate handlers; as a client that can correctly query the endpoints of the API; as systematic documentation for the API; and more. Servant is fully extensible: the API language can be augmented with new constructs, and new interpretations can be defined. The key Haskell features making all this possible are data kinds, (open) type families and (open) type classes. The techniques we use are reminiscent of general-purpose generic programming. However, where most generic programming libraries are interested in automatically deriving programs for a large class of datatypes from many different domains, we are only interested in a small class of datatypes that is used in the DSL for describing APIs.},
  isbn = {978-1-4503-3810-3},
  pagetotal = {12},
  keywords = {embedded domain-specific languages,generic programming,Haskell,type-level programming,web programming}
}

@article{2016,
  title = {{{FairPlayStreamingOverview}}},
  date = {2016},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/4VRTZRIP/2016 - FairPlayStreamingOverview.pdf}
}

@online{2023jonestypesystems,
  title = {Type Systems: {{Lambda}} Calculus to Hindley-Milner},
  author = {Jones, Adam},
  date = {2022/2023},
  url = {https://www.youtube.com/playlist?list=PLoyEIY-nZq_uipRkxG79uzAgfqDuHzot}
}

@software{2024,
  title = {Secdev/Scapy},
  date = {2024-09-05T11:26:44Z},
  origdate = {2015-10-01T17:06:46Z},
  url = {https://github.com/secdev/scapy},
  urldate = {2024-09-05},
  abstract = {Scapy: the Python-based interactive packet manipulation program \& library.},
  organization = {SecDev},
  keywords = {hacktoberfest,network,network-analysis,network-discovery,network-security,network-visualization,packet-analyser,packet-capture,packet-crafting,packet-sniffer,pcap,python,scapy,security,security-tools}
}

@book{alcock2014,
  title = {How to {{Think About Analysis}}},
  author = {Alcock, Lara},
  date = {2014-12-01},
  edition = {1st edition},
  publisher = {Oxford University Press},
  location = {Oxford, United Kingdom},
  abstract = {Analysis (sometimes called Real Analysis or Advanced Calculus) is a core subject in most undergraduate mathematics degrees. It is elegant, clever and rewarding to learn, but it is hard. Even the best students find it challenging, and those who are unprepared often find it incomprehensible at first. This book aims to ensure that no student need be unprepared. It is not like other Analysis books. It is not a textbook containing standard content. Rather, it is designed to be read before arriving at university and/or before starting an Analysis course, or as a companion text once a course is begun. It provides a friendly and readable introduction to the subject by building on the student's existing understanding of six key topics: sequences, series, continuity, differentiability, integrability and the real numbers. It explains how mathematicians develop and use sophisticated formal versions of these ideas, and provides a detailed introduction to the central definitions, theorems and proofs, pointing out typical areas of difficulty and confusion and explaining how to overcome these. The book also provides study advice focused on the skills that students need if they are to build on this introduction and learn successfully in their own Analysis courses: it explains how to understand definitions, theorems and proofs by relating them to examples and diagrams, how to think productively about proofs, and how theories are taught in lectures and books on advanced mathematics. It also offers practical guidance on strategies for effective study planning. The advice throughout is research based and is presented in an engaging style that will be accessible to students who are new to advanced abstract mathematics.},
  isbn = {978-0-19-872353-0},
  langid = {english},
  pagetotal = {272}
}

@book{allen2015haskell,
  title = {Haskell from First Principles},
  author = {Allen, Christopher and Moronuki, Julie},
  date = {2015},
  publisher = {Gumroad}
}

@book{alteregoeffect,
  title = {Alter Ego Effect},
  author = {Herman, Todd},
  date = {2019},
  publisher = {HarperCollins},
  location = {New York, NY},
  isbn = {978-0-06-283863-5}
}

@book{aristotle2012,
  title = {Rhetoric},
  author = {Aristotle},
  translator = {Roberts, W. Rhys},
  date = {2012-03-06},
  publisher = {Dover Publications},
  abstract = {One of the seminal works of Western philosophy, Aristotle's Rhetoric vastly influenced all subsequent thought on the subject — philosophical, political, and literary. Focusing on the use of language as both a vehicle and a tool to shape persuasive argument, Aristotle delineates with remarkable insight both practical and aesthetic elements and their proper combination in an effective presentation, oral or written. He also emphasizes the role of language in achieving precision and clarity of thought.The ancients regarded rhetoric as the crowning intellectual discipline — the synthesis of logical principles and other knowledge attained from years of schooling. Modern readers will find considerable relevance in Aristotelian rhetoric and its focus on developing persuasive tools of argumentation. Aristotle's examinations of how to compose and interpret speeches offer significant insights into the language and style of contemporary communications, from advertisements to news reports and other media.},
  langid = {english},
  pagetotal = {216}
}

@book{aronson1972social,
  title = {The Social Animal},
  author = {Aronson, Elliot},
  date = {1972},
  publisher = {Worth Publishers},
  location = {New York}
}

@book{axler2023,
  title = {Linear {{Algebra Done Right}}},
  author = {Axler, Sheldon},
  date = {2023-11-20},
  edition = {4th ed. 2024 edition},
  publisher = {Springer},
  location = {Cham Heidelberg New York Dordrecht London},
  abstract = {Now available in Open Access, this best-selling textbook for a second course in linear algebra is aimed at undergraduate math majors and graduate students. The fourth edition gives an expanded treatment of the singular value decomposition and its consequences. It includes a new chapter on multilinear algebra, treating bilinear forms, quadratic forms, tensor products, and an approach to determinants via alternating multilinear forms. This new edition also increases the use of the minimal polynomial to provide cleaner proofs of multiple results. Also, over 250 new exercises have been added.The novel approach taken here banishes determinants to the end of the book. The text focuses on the central goal of linear algebra: understanding the structure of linear operators on finite-dimensional vector spaces. The author has taken unusual care to motivate concepts and simplify proofs. A variety of interesting exercises in each chapter helps students understand and manipulate the objects of linear algebra. Beautiful formatting creates pages with an unusually student-friendly appearance in both print and electronic versions.No prerequisites are assumed other than the usual demand for suitable mathematical maturity. The text starts by discussing vector spaces, linear independence, span, basis, and dimension. The book then deals with linear maps, eigenvalues, and eigenvectors. Inner-product spaces are introduced, leading to the finite-dimensional spectral theorem and its consequences. Generalized eigenvectors are then used to provide insight into the structure of a linear operator.From the reviews of previous editions:Altogether, the text is a didactic masterpiece. ― zbMATHThe determinant-free proofs are elegant and intuitive. ― American Mathematical MonthlyThe most original linear algebra book to appear in years, it certainly belongs in every undergraduate library ― CHOICE},
  isbn = {978-3-031-41025-3},
  langid = {english},
  pagetotal = {407}
}

@book{Ayetkin2003SchaumsOA,
  title = {Schaum's Outline of Abstract Algebra},
  author = {Jaisingh, Lloyd and Ayres, Frank},
  date = {2003},
  publisher = {McGraw-Hill},
  url = {https://www.amazon.com/Schaums-Outline-Abstract-Algebra-Outlines/dp/0071403272},
  isbn = {0-07-140327-2}
}

@book{banner2007,
  title = {The {{Calculus Lifesaver}}: {{All}} the {{Tools You Need}} to {{Excel}} at {{Calculus}}},
  shorttitle = {The {{Calculus Lifesaver}}},
  author = {Banner, Adrian},
  date = {2007-03-25},
  edition = {Illustrated edition},
  publisher = {Princeton University Press},
  location = {Princeton},
  abstract = {For many students, calculus can be the most mystifying and frustrating course they will ever take. The Calculus Lifesaver provides students with the essential tools they need not only to learn calculus, but to excel at it.All of the material in this user-friendly study guide has been proven to get results. The book arose from Adrian Banner's popular calculus review course at Princeton University, which he developed especially for students who are motivated to earn A's but get only average grades on exams. The complete course will be available for free on the Web in a series of videotaped lectures. This study guide works as a supplement to any single-variable calculus course or textbook. Coupled with a selection of exercises, the book can also be used as a textbook in its own right. The style is informal, non-intimidating, and even entertaining, without sacrificing comprehensiveness. The author elaborates standard course material with scores of detailed examples that treat the reader to an "inner monologue"--the train of thought students should be following in order to solve the problem--providing the necessary reasoning as well as the solution. The book's emphasis is on building problem-solving skills. Examples range from easy to difficult and illustrate the in-depth presentation of theory.The Calculus Lifesaver combines ease of use and readability with the depth of content and mathematical rigor of the best calculus textbooks. It is an indispensable volume for any student seeking to master calculus.Serves as a companion to any single-variable calculus textbookInformal, entertaining, and not intimidatingInformative videos that follow the book--a full forty-eight hours of Banner's Princeton calculus-review course--is available at Adrian Banner lecturesMore than 475 examples (ranging from easy to hard) provide step-by-step reasoningTheorems and methods justified and connections made to actual practiceDifficult topics such as improper integrals and infinite series covered in detailTried and tested by students taking freshman calculus},
  isbn = {978-0-691-13088-0},
  langid = {english},
  pagetotal = {752}
}

@book{berrymanPromptEngineeringLLMs2024,
  title = {Prompt {{Engineering}} for {{LLMs}}: {{The Art}} and {{Science}} of {{Building Large Language Model}}–{{Based Applications}}},
  shorttitle = {Prompt {{Engineering}} for {{LLMs}}},
  author = {Berryman, John and Ziegler, Albert},
  date = {2024-12-10},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Sebastopol, CA},
  abstract = {Large language models (LLMs) are revolutionizing the world, promising to automate tasks and solve complex problems. A new generation of software applications are using these models as building blocks to unlock new potential in almost every domain, but reliably accessing these capabilities requires new skills. This book will teach you the art and science of prompt engineering-the key to unlocking the true potential of LLMs.Industry experts John Berryman and Albert Ziegler share how to communicate effectively with AI, transforming your ideas into a language model-friendly format. By learning both the philosophical foundation and practical techniques, you'll be equipped with the knowledge and confidence to build the next generation of LLM-powered applications.Understand LLM architecture and learn how to best interact with itDesign a complete prompt-crafting strategy for an applicationGather, triage, and present context elements to make an efficient promptMaster specific prompt-crafting techniques like few-shot learning, chain-of-thought prompting, and RAG},
  isbn = {978-1-0981-5615-2},
  langid = {english},
  pagetotal = {280}
}

@book{bez2023,
  title = {Quantum {{Computation}}},
  author = {Bez, Helmut and Croft, Tony},
  date = {2023-02-23},
  edition = {1st edition},
  publisher = {{Chapman and Hall/CRC}},
  location = {Boca Raton},
  abstract = {Quantum Computation presents the mathematics of quantum computation. The purpose is to introduce the topic of quantum computing to students in computer science, physics and mathematics who have no prior knowledge of this field. The book is written in two parts. The primary mathematical topics required for an initial understanding of quantum computation are dealt with in Part I: sets, functions, complex numbers and other relevant mathematical structures from linear and abstract algebra. Topics are illustrated with examples focussing on the quantum computational aspects which will follow in more detail in Part II. Part II discusses quantum information, quantum measurement and quantum algorithms. These topics provide foundations upon which more advanced topics may be approached with confidence. FeaturesA more accessible approach than most competitor texts, which move into advanced, research-level topics too quickly for today's students. Part I is comprehensive in providing all necessary mathematical underpinning, particularly for those who need more opportunity to develop their mathematical competence.More confident students may move directly to Part II and dip back into Part I as a reference. Ideal for use as an introductory text for courses in quantum computing.Fully worked examples illustrate the application of mathematical techniques. Exercises throughout develop concepts and enhance understanding.End-of-chapter exercises offer more practice in developing a secure foundation.},
  isbn = {978-1-032-20648-6},
  langid = {english},
  pagetotal = {392}
}

@book{bird1997,
  title = {The {{Algebra}} of {{Programming}}},
  author = {Bird, Richard and family=Moor, given=Oege, prefix=de, useprefix=false},
  date = {1997-09-26},
  edition = {First Edition},
  publisher = {Prentice Hall},
  location = {London ; New York},
  abstract = {Describes an algebraic approach to programming that permits the calculation of programs. Introduces the fundamentals of algebra for programming. Presents paradigms and strategies of program construction that form the core of Algorithm Design. Discusses functions and categories; applications; relations and allegories; datatypes; recursive programs, optimization issues, thinning algorithms, dynamic programming and greedy algorithms. Appropriate for all programmers.},
  isbn = {978-0-13-507245-5},
  langid = {english},
  pagetotal = {295}
}

@book{bird2015,
  title = {Thinking Functionally with Haskell},
  author = {Bird, Richard},
  date = {2015},
  publisher = {Cambridge University Press}
}

@book{bird2020,
  title = {Algorithm Design with Haskell},
  author = {Bird, Richard and Gibbons, Jeremy},
  date = {2020},
  publisher = {Cambridge University Press}
}

@book{blackburn2006,
  title = {Learn {{Prolog Now}}!},
  author = {Blackburn, Patrick and Bos, Johan and Striegnitz, Kristina},
  date = {2006-06-15},
  publisher = {College Publications},
  location = {London},
  abstract = {Prolog is a programming language, but a rather unusual one. ``Prolog'' is short for ``Programming with Logic'', and the link with logic gives Prolog its special character. At the heart of Prolog lies a surprising idea: don't tell the computer what to do. Instead, describe situations of interest, and compute by asking questions. Prolog will logically deduce new facts about the situations and give its deductions back to us as answers. Why learn Prolog? For a start, its ``say what the problem is, rather than how to solve it'' stance, means that it is a very high level language, good for knowledge rich applications such as artificial intelligence, natural language processing, and the semantic web. So by studying Prolog, you gain insight into how sophisticated tasks can be handled computationally. Moreover, Prolog requires a different mindset. You have to learn to see problems from a new perspective, declaratively rather than procedurally. Acquiring this mindset, and learning to appreciate the links between logic and programming, makes the study of Prolog both challenging and rewarding. Learn Prolog Now! is a practical introduction to this fascinating language. Freely available as a web-book since 2002 (see www.learnprolognow.org) Learn Prolog Now! has became one of the most popular introductions to the Prolog programming language, an introduction prized for its clarity and down-to-earth approach. It is widely used as a textbook at university departments around the world, and even more widely used for self study. College Publications is proud to present here the first hard-copy version of this online classic. Carefully revised in the light of reader's feedback, and now with answers to all the exercises, here you will find the essential material required to help you learn Prolog now.},
  isbn = {978-1-904987-17-8},
  langid = {english},
  pagetotal = {284}
}

@book{bornat2005,
  title = {Proof and {{Disproof}} in {{Formal Logic}}: {{An Introduction}} for {{Programmers}}},
  shorttitle = {Proof and {{Disproof}} in {{Formal Logic}}},
  author = {Bornat, Richard},
  date = {2005-09-29},
  edition = {1st edition},
  publisher = {Oxford University Press},
  location = {Oxford ; New York},
  abstract = {Proof and Disproof in Formal Logic is a lively and entertaining introduction to formal logic providing an excellent insight into how a simple logic works. Formal logic allows you to check a logical claim without considering what the claim means. This highly abstracted idea is an essential and practical part of computer science. The idea of a formal system-a collection of rules and axioms, which define a universe of logical proofs-is what gives us programming languages and modern-day programming. This book concentrates on using logic as a tool: making and using formal proofs and disproofs of particular logical claims. The logic it uses-natural deduction-is very small and very simple; working with it helps you see how large mathematical universes can be built on small foundations. The book is divided into four parts: Part I "Basics" gives an introduction to formal logic with a short history of logic and explanations of some technical words. Part II "Formal Syntactic Proof" show you how to do calculations in a formal system where you are guided by shapes and never need to think about meaning. Your experiments are aided by Jape, which can operate as both inquisitor and oracle. Part III "Formal Semantic Disproof" shows you how to construct mathematical counterexamples to shoe that proof is impossible. Jape can check the counterexamples you build. Part IV " Program Specification and Proof" describes how to apply your logical understanding to a real computer science problem, the accurate description and verification of programs. Jape helps, as far as arithmetic allows. Aimed at undergraduates and graduates in computer science, logic, mathematics and philosophy, the text includes reference to and exercises based on the computer software package Jape, an interactive teaching and research tool designed and hosted by the author that is freely available on the web.},
  isbn = {978-0-19-853027-5},
  langid = {english},
  pagetotal = {264}
}

@unpublished{bragilevsky-clear-path2020,
  title = {Clear {{Path}} to {{Haskell Complexities}}},
  author = {Bragilevsky, Vitaly},
  date = {2020},
  url = {https://drive.google.com/file/d/1S8AeXgui3IVclj8yiMyZgg5ZOQ1h0ZzO/view},
  urldate = {2024-08-05}
}

@book{bragilevsky2021haskell,
  title = {Haskell in Depth},
  author = {Bragilevsky, Vitaly},
  date = {2021},
  publisher = {Manning}
}

@book{burgis2021,
  title = {Wanting, the Power of Mimetic Desire in Everyday Life},
  author = {Burgis, Luke},
  date = {2021},
  publisher = {St. Martin's Press}
}

@article{byrd2006,
  title = {From {{Variadic Functions}} to {{Variadic Relations}}},
  author = {Byrd, William E and Friedman, Daniel P},
  date = {2006},
  abstract = {We present an implementation of miniKanren, an embedding of logic programming in R5RS Scheme that comprises three logic operators. We describe these operators, and use them to define plus o, a relation that adds two numbers. We then define plus ∗o, which adds zero or more numbers; plus ∗o takes exactly two arguments, the first of which is a list of numbers to be added or a logical variable representing such a list. We call such a relation pseudo-variadic. Combining Scheme’s var-args facility with pseudo-variadic helper relations leads to variadic relations, which take a variable number of arguments. We focus on pseudo-variadic relations, which we demonstrate are more flexible than their variadic equivalents.},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/3WB42TPS/Byrd and Friedman - 2006 - From Variadic Functions to Variadic Relations.pdf}
}

@book{camargo2022,
  title = {{{OPNsense Beginner}} to {{Professional}}: {{Protect}} Networks and Build next-Generation Firewalls Easily with {{OPNsense}}},
  shorttitle = {{{OPNsense Beginner}} to {{Professional}}},
  author = {family=Camargo, given=Julio Cesar Bueno, prefix=de, useprefix=false},
  date = {2022-06-24},
  edition = {1st edition},
  publisher = {Packt Publishing},
  abstract = {Work with one of the most efficient open-source FreeBSD-based firewall and routing solutions to secure your network with easeKey FeaturesLearn end-to-end OPNsense firewall implementation and managementDefend against attacks by leveraging third-party plugins such as Nginx and SenseiGrasp hands-on examples and labs to become proficient with OPNsense firewallBook DescriptionOPNsense is one of the most powerful open source firewalls and routing platforms available. With OPNsense, you can now protect networks using features that were only previously available to closed source commercial firewalls.This book is a practical guide to building a comprehensive network defense strategy using OPNsense. You'll start with the basics, understanding how to install, configure, and protect network resources using native features and additional OPNsense plugins. Next, you'll explore real-world examples to gain in-depth knowledge of firewalls and network defense. You'll then focus on boosting your network defense, preventing cyber threats, and improving your knowledge of firewalling using this open source security platform.By the end of this OPNsense book, you'll be able to install, configure, and manage the OPNsense firewall by making the most of its features.What you will learnUnderstand the evolution of OPNsenseGet up and running with installing and setting up OPNsenseBecome well-versed with firewalling concepts and learn their implementation and practicesDiscover how to apply web browsing controls and website protectionLeverage Sensei to implement next-generation firewall featuresExplore the command-line interface (CLI) and learn the most relevant FreeBSD commandsWho this book is forThis OPNsense firewall book is for system administrators, network administrators, network security professionals, and enthusiasts who wish to build and manage an enterprise-grade firewall using OPNsense. A basic understanding of how a firewall works will be helpful to make the most of this book.Table of ContentsAn OPNsense OverviewInstalling OPNsenseConfiguring an OPNsense NetworkSystem ConfigurationFirewallNetwork Address Translation (NAT)Traffic ShapingVirtual Private NetworkingMulti-WAN – Failover and Load BalancingReportingDeploying DHCP in OPNsenseDNS ServicesWeb ProxyCaptive PortalNetwork Intrusion (Detection and Prevention) SystemsNext-Generation Firewall with ZenarmorFirewall High AvailabilityWebsite Protection with OPNsenseCommand-Line InterfaceAPI – Application Programming Interface},
  langid = {english},
  pagetotal = {464}
}

@online{castro2023,
  title = {Beginner's {{Guide}} to {{Set Up}} a {{Home Network Using OPNsense}}},
  author = {Castro, Dustin},
  date = {2023},
  url = {https://homenetworkguy.com/how-to/beginners-guide-to-set-up-home-network-using-opnsense/},
  urldate = {2024-08-24},
  abstract = {Going beyond the basics of home networking},
  langid = {american},
  file = {/home/hippoid/fun/zotero/storage/K3CHPI5Y/beginners-guide-to-set-up-home-network-using-opnsense.html}
}

@book{cheng2022,
  title = {The {{Joy}} of {{Abstraction}}: {{An Exploration}} of {{Math}}, {{Category Theory}}, and {{Life}}},
  shorttitle = {The {{Joy}} of {{Abstraction}}},
  author = {Cheng, Eugenia},
  date = {2022-10-13},
  edition = {New edition},
  publisher = {Cambridge University Press},
  location = {United Kingdom},
  abstract = {Mathematician and popular science author Eugenia Cheng is on a mission to show you that mathematics can be flexible, creative, and visual. This joyful journey through the world of abstract mathematics into category theory will demystify mathematical thought processes and help you develop your own thinking, with no formal mathematical background needed. The book brings abstract mathematical ideas down to earth using examples of social justice, current events, and everyday life – from privilege to COVID-19 to driving routes. The journey begins with the ideas and workings of abstract mathematics, after which you will gently climb toward more technical material, learning everything needed to understand category theory, and then key concepts in category theory like natural transformations, duality, and even a glimpse of ongoing research in higher-dimensional category theory. For fans of How to Bake Pi, this will help you dig deeper into mathematical concepts and build your mathematical background.},
  isbn = {978-1-108-47722-2},
  langid = {english},
  pagetotal = {438}
}

@report{cheshire2013,
  type = {Request for Comments},
  title = {{{DNS-Based Service Discovery RFC}} 6763},
  author = {Cheshire, Stuart and Krochmal, Marc},
  date = {2013-02},
  number = {RFC 6763},
  institution = {Internet Engineering Task Force},
  doi = {10.17487/RFC6763},
  url = {https://datatracker.ietf.org/doc/rfc6763},
  urldate = {2024-09-05},
  abstract = {This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.},
  pagetotal = {49},
  file = {/home/hippoid/fun/zotero/storage/G3Q9AD3E/Cheshire and Krochmal - 2013 - DNS-Based Service Discovery.pdf}
}

@report{cheshire2013a,
  type = {Request for Comments},
  title = {Multicast {{DNS RFC}} 6762},
  author = {Cheshire, Stuart and Krochmal, Marc},
  date = {2013-02},
  number = {RFC 6762},
  institution = {Internet Engineering Task Force},
  doi = {10.17487/RFC6762},
  url = {https://datatracker.ietf.org/doc/rfc6762},
  urldate = {2024-09-06},
  abstract = {As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful. Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names. The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.},
  pagetotal = {70},
  file = {/home/hippoid/fun/zotero/storage/5HJ5TR7S/Cheshire and Krochmal - 2013 - Multicast DNS.pdf}
}

@article{christiansen2019,
  title = {Checking {{Dependent Types}} with {{Normalization}} by {{Evaluation}}: {{A Tutorial}} ({{Haskell Version}})},
  author = {Christiansen, David Thrane},
  date = {2019-05-21},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/22W9VICX/Christiansen - Checking Dependent Types with Normalization by Eva.pdf}
}

@book{chu-carroll2013,
  title = {Good {{Math}}: {{A Geek}}'s {{Guide}} to the {{Beauty}} of {{Numbers}}, {{Logic}}, and {{Computation}}},
  shorttitle = {Good {{Math}}},
  author = {Chu-Carroll, Mark C.},
  date = {2013-07-18},
  edition = {1st edition},
  publisher = {Pragmatic Bookshelf},
  abstract = {Why do Roman numerals persist? How do we know that some infinities are larger than others? And how can we know for certain a program will ever finish? In this fast-paced tour of modern and not-so-modern math, computer scientist Mark Chu-Carroll explores some of the greatest breakthroughs and disappointments of more than two thousand years of mathematical thought. There is joy and beauty in mathematics, and in more than two dozen essays drawn from his popular “Good Math” blog, you’ll find concepts, proofs, and examples that are often surprising, counterintuitive, or just plain weird.Mark begins his journey with the basics of numbers, with an entertaining trip through the integers and the natural, rational, irrational, and transcendental numbers. The voyage continues with a look at some of the oddest numbers in mathematics, including zero, the golden ratio, imaginary numbers, Roman numerals, and Egyptian and continuing fractions. After a deep dive into modern logic, including an introduction to linear logic and the logic-savvy Prolog language, the trip concludes with a tour of modern set theory and the advances and paradoxes of modern mechanical computing.If your high school or college math courses left you grasping for the inner meaning behind the numbers, Mark’s book will both entertain and enlighten you.},
  langid = {english},
  pagetotal = {282}
}

@book{cialdini2007influence,
  title = {Influence: {{The}} Psychology of Persuasion},
  author = {Cialdini, Robert B.},
  date = {2007},
  publisher = {Harper Business},
  location = {New York, NY}
}

@article{claessen2000,
  title = {{{QuickCheck}}: {{A Lightweight Tool}} for {{Random Testing}} of {{Haskell Programs}}},
  shorttitle = {{{QuickCheck}}},
  author = {Claessen, Koen and Hughes, John},
  date = {2000-01-07},
  journaltitle = {Proceedings of the ACM SIGPLAN International Conference on Functional Programming, ICFP},
  shortjournal = {Proceedings of the ACM SIGPLAN International Conference on Functional Programming, ICFP},
  volume = {46},
  doi = {10.1145/1988042.1988046},
  abstract = {QuickCheck is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are described as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in which the tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffices to obtain good coverage of the definition under test.},
  file = {/home/hippoid/fun/zotero/storage/GGMHAXLN/Claessen and Hughes - 2000 - QuickCheck A Lightweight Tool for Random Testing of Haskell Programs.pdf}
}

@book{connell2004,
  title = {Elements of Abstract and Linear Algebra},
  author = {Connell, E. H.},
  date = {2004}
}

@book{cummings2019,
  title = {Real {{Analysis}}: {{A Long-Form Mathematics Textbook}}},
  shorttitle = {Real {{Analysis}}},
  author = {Cummings, Jay},
  date = {2019-07-15},
  edition = {2nd edition},
  publisher = {Independently published},
  location = {Sacramento, CA},
  abstract = {This textbook is designed for students. Rather than the typical definition-theorem-proof-repeat style, this text includes much more commentary, motivation and explanation. The proofs are not terse, and aim for understanding over economy. Furthermore, dozens of proofs are preceded by "scratch work" or a proof sketch to give students a big-picture view and an explanation of how they would come up with it on their own. Examples often drive the narrative and challenge the intuition of the reader. The text also aims to make the ideas visible, and contains over 200 illustrations. The writing is relaxed and includes interesting historical notes, periodic attempts at humor, and occasional diversions into other interesting areas of mathematics. The text covers the real numbers, cardinality, sequences, series, the topology of the reals, continuity, differentiation, integration, and sequences and series of functions. Each chapter ends with exercises, and nearly all include some open questions. The first appendix contains a construction the reals, and the second is a collection of additional peculiar and pathological examples from analysis. The author believes most textbooks are extremely overpriced and endeavors to help change this.Hints and solutions to select exercises can be found at LongFormMath.com.This is the 2 + epsilon edition of this book. The second edition was published in July 2019. In January 2024, an epsilon of changes were made and the manuscript was updated, without officially creating a new edition.},
  isbn = {978-1-0772-5454-1},
  langid = {english},
  pagetotal = {449}
}

@book{date2015,
  title = {{{SQL}} and {{Relational Theory}}: {{How}} to {{Write Accurate SQL Code}}},
  shorttitle = {{{SQL}} and {{Relational Theory}}},
  author = {Date, C. J.},
  date = {2015-12-15},
  edition = {3rd edition},
  publisher = {O'Reilly Media},
  location = {Sebastopol, Calif},
  abstract = {SQL is full of difficulties and traps for the unwary. You can avoid them if you understand relational theory, but only if you know how to put that theory into practice. In this book, Chris Date explains relational theory in depth, and demonstrates through numerous examples and exercises how you can apply it to your use of SQL.  This third edition has been revised, extended, and improved throughout. Topics whose treatment has been expanded include data types and domains, table comparisons, image relations, aggregate operators and summarization, view updating, and subqueries. A special feature of this edition is a new appendix on NoSQL and relational theory. Could you write an SQL query to find employees who have worked at least once in every programming department in the company? And be sure it’s correct? Why is proper column naming so important? Nulls in the database cause wrong answers. Why? What you can do about it? How can image relations help you formulate complex SQL queries? SQL supports "quantified comparisons," but they’re better avoided. Why? And how? Database theory and practice have evolved considerably since Codd first defined the relational model, back in 1969. This book draws on decades of experience to present the most up to date treatment of the material available anywhere. Anyone with a modest to advanced background in SQL can benefit from the insights it contains. The book is product independent.},
  isbn = {978-1-4919-4117-1},
  langid = {english},
  pagetotal = {581}
}

@book{dehaan2007,
  title = {Applied {{Mathematics}} for {{Database Professionals}}},
  author = {{deHaan}, Lex and Koppelaars, Toon},
  date = {2007-06-19},
  edition = {1st ed. edition},
  publisher = {Apress},
  location = {Berkeley, CA},
  abstract = {Relational databases hold data, right? They do indeed, but to think of a database as nothing more than a container for data is to miss out on the profound power that underlies relational technology. A far more powerful way of thinking lies in relational technologys foundation in the mathematical disciplines of logic and set theory.Databases contain truths or propositions describing some area of interest such as a business. Those truths are organized into sets. Operations from logic and set theory can be applied to existing sets of truths to derive new sets of truths. Applied Mathematics for Database Professionals introduces you to this way of thinking, to the logic and set theory that underlies relational database technology. All this may sound abstract now, but there are profound benefits from the deeper understanding youll gain from this book.The math that you'll learn in this book will put you above the level of understanding of most database professionalstoday. You'll better understand the technology and be able to apply it more effectively. You'll avoid data anomalies like redundancy and inconsistency. Understanding whats in this book will take your mastery of relational technology to heights you may not have thought possible.This book is reviewed and endorsed by C. J. Date and features a foreword by the same.},
  isbn = {978-1-59059-745-3},
  langid = {english},
  pagetotal = {407}
}

@online{diamond2024,
  title = {Polylogarithmic {{Proofs}} for {{Multilinears}} over {{Binary Towers}}},
  author = {Diamond, Benjamin E. and Posen, Jim},
  date = {2024},
  number = {2024/504},
  url = {https://eprint.iacr.org/2024/504},
  urldate = {2024-05-07},
  abstract = {We introduce a polylogarithmic-verifier polynomial commitment scheme for multilinears over towers of binary fields. To achieve this, we adapt an idea of Zeilberger, Chen and Fisch's BaseFold ('23) to the setting of binary towers, using FRI (ICALP '18)'s binary-field variant. In the process, we reinterpret Lin, Chung and Han (FOCS '14)'s novel polynomial basis so as to make apparent its compatibility with FRI. We moreover introduce a "packed" version of our protocol, which supports—with no embedding overhead during its commitment phase—multilinears over tiny fields (including that with just two elements). Our protocol leverages a new multilinear FRI-folding technique, and exploits the recent tensor proximity gap of Diamond and Posen (Commun. Cryptol. '24). We achieve concretely small proofs for enormous binary multilinears, shrinking the proofs of Diamond and Posen ('23) by an order of magnitude.},
  pubstate = {prepublished},
  keywords = {binary fields,proximity testing,succinct arguments},
  annotation = {Publication info: Preprint.},
  file = {/home/hippoid/fun/zotero/storage/P9IFTQQ6/Diamond and Posen - 2024 - Polylogarithmic Proofs for Multilinears over Binar.pdf}
}

@book{doets2004,
  title = {The Haskell Road to Logic, Maths and Programming},
  author = {Doets, Kees},
  date = {2004},
  edition = {2},
  publisher = {Texts in Computing}
}

@software{ecceman2024,
  title = {Ecceman/Affinity},
  author = {{ecceman}},
  date = {2024-08-23T06:21:52Z},
  origdate = {2018-06-06T10:25:11Z},
  url = {https://github.com/ecceman/affinity},
  urldate = {2024-08-24},
  abstract = {Free 2D symbols for computer network diagrams},
  keywords = {diagram,icon,image,network,router,switch,symbol,topology}
}

@book{eisenberg2014,
  title = {{{SVG}} Essentials: {{Producing}} Scalable Vector Graphics with {{XML}}},
  author = {Eisenberg, J. David},
  date = {2014},
  publisher = {O'Reilly Media},
  url = {https://www.amazon.com/SVG-Essentials-Producing-Scalable-Graphics/dp/1449374352/},
  isbn = {1-4493-7435-2}
}

@report{Elliott2009-type-class-morphisms-TR,
  title = {Denotational Design with Type Class Morphisms (Extended Version)},
  author = {Elliott, Conal},
  date = {2009-03},
  number = {2009--01},
  institution = {LambdaPix},
  url = {http://conal.net/papers/type-class-morphisms}
}

@book{fall2011,
  title = {{{TCP}}/{{IP Illustrated}}: {{The Protocols}}, {{Volume}} 1},
  shorttitle = {{{TCP}}/{{IP Illustrated}}},
  author = {Fall, Kevin and Stevens, W.},
  date = {2011-11-15},
  edition = {2nd edition},
  publisher = {Addison-Wesley Professional},
  location = {Upper Saddle River, NJ},
  abstract = {“For an engineer determined to refine and secure Internet operation or to explore alternative solutions to persistent problems, the insights provided by this book will be invaluable.”―Vint Cerf, Internet pioneerTCP/IP Illustrated, Volume 1, Second Edition,is a detailed and visual guide to today’s TCP/IP protocol suite. Fully updated for the newest innovations, it demonstrates each protocol in action through realistic examples from modern Linux, Windows, and Mac OS environments. There’s no better way to discover why TCP/IP works as it does, how it reacts to common conditions, and how to apply it in your own applications and networks.Building on the late W. Richard Stevens’ classic first edition, author Kevin R. Fall adds his cutting-edge experience as a leader in TCP/IP protocol research, updating the book to fully reflect the latest protocols and best practices. He first introduces TCP/IP’s core goals and architectural concepts, showing how they can robustly connect diverse networks and support multiple services running concurrently. Next, he carefully explains Internet addressing in both IPv4 and IPv6 networks. Then, he walks through TCP/IP’s structure and function from the bottom up: from link layer protocols–such as Ethernet and Wi-Fi–through network, transport, and application layers.Fall thoroughly introduces ARP, DHCP, NAT, firewalls, ICMPv4/ICMPv6, broadcasting, multicasting, UDP, DNS, and much more. He offers extensive coverage of reliable transport and TCP, including connection management, timeout, retransmission, interactive data flow, and congestion control. Finally, he introduces the basics of security and cryptography, and illuminates the crucial modern protocols for protecting security and privacy, including EAP, IPsec, TLS, DNSSEC, and DKIM. Whatever your TCP/IP experience, this book will help you gain a deeper, more intuitive understanding of the entire protocol suite so you can build better applications and run more reliable, efficient networks.},
  isbn = {978-0-321-33631-6},
  langid = {english},
  pagetotal = {1056}
}

@book{fong2020,
  title = {Programming with {{Categories}}},
  author = {Fong, Brendan and Milewski, Bartosz and Spivak, David I},
  date = {2020-10-06},
  abstract = {DRAFT}
}

@book{friedman1995,
  title = {The {{Little Schemer}} - 4th {{Edition}}},
  author = {Friedman, Daniel P. and Felleisen, Matthias and Bibby, Duane and Sussman, Gerald J.},
  date = {1995-12-21},
  edition = {4th ed. edition},
  publisher = {The MIT Press},
  location = {Cambridge, Mass.},
  abstract = {The notion that "thinking about computing is one of the most exciting things the human mind can do" sets both The Little Schemer (formerly known as The Little LISPer) and its new companion volume, The Seasoned Schemer, apart from other books on LISP. The authors' enthusiasm for their subject is compelling as they present abstract concepts in a humorous and easy-to-grasp fashion. Together, these books will open new doors of thought to anyone who wants to find out what computing is really about. The Little Schemer introduces computing as an extension of arithmetic and algebra; things that everyone studies in grade school and high school. It introduces programs as recursive functions and briefly discusses the limits of what computers can do. The authors use the programming language Scheme, and interesting foods to illustrate these abstract ideas. The Seasoned Schemer informs the reader about additional dimensions of computing: functions as values, change of state, and exceptional cases. The Little LISPer has been a popular introduction to LISP for many years. It had appeared in French and Japanese. The Little Schemer and The Seasoned Schemer are worthy successors and will prove equally popular as textbooks for Scheme courses as well as companion texts for any complete introductory course in Computer Science.},
  isbn = {978-0-262-56099-3},
  langid = {english},
  pagetotal = {216}
}

@book{friedman2018,
  title = {The {{Reasoned Schemer}}, Second Edition},
  author = {Friedman, Daniel P. and Byrd, William E. and Kiselyov, Oleg and Hemann, Jason},
  namea = {Bibby, Duane},
  nameatype = {collaborator},
  date = {2018-03-09},
  edition = {2nd edition},
  publisher = {The MIT Press},
  location = {Cambridge, Massachusetts London, England},
  abstract = {A new edition of a book, written in a humorous question-and-answer style, that shows how to implement~ and use an elegant little programming language for logic programming.The goal of this book is to show the beauty and elegance of relational programming, which captures the essence of logic programming.~ The book shows how to implement a relational programming language in Scheme, or in any other functional language, and demonstrates the remarkable flexibility of the resulting relational programs. As in the first edition, the pedagogical method is a series of questions and answers, which proceed with the characteristic humor that marked The Little Schemer and The Seasoned Schemer. Familiarity with a functional language or with the first five chapters of The Little Schemer is assumed.~For this second edition, the authors have greatly simplified the programming language used in the book, as well as the implementation of the language. In addition to revising the text extensively, and simplifying and revising the “Laws” and “Commandments,” they have added explicit “Translation” rules to ease translation of Scheme functions into relations.},
  isbn = {978-0-262-53551-9},
  langid = {english},
  pagetotal = {208}
}

@book{friedman2018a,
  title = {The {{Little Typer}}},
  author = {Friedman, Daniel P. and Christiansen, David Thrane},
  namea = {Bibby, Duane},
  nameatype = {collaborator},
  date = {2018-09-18},
  edition = {Illustrated edition},
  publisher = {The MIT Press},
  location = {Cambridge, MA London},
  abstract = {An introduction to dependent types, demonstrating the most beautiful aspects, one step at a time.A program's type describes its behavior. Dependent types are a first-class part of a language, and are much more powerful than other kinds of types; using just one language for types and programs allows program descriptions to be as powerful as the programs they describe. The Little Typer explains dependent types, beginning with a very small language that looks very much like Scheme and extending it to cover both programming with dependent types and using dependent types for mathematical reasoning. Readers should be familiar with the basics of a Lisp-like programming language, as presented in the first four chapters of The Little Schemer. The first five chapters of The Little Typer provide the needed tools to understand dependent types; the remaining chapters use these tools to build a bridge between mathematics and programming. Readers will learn that tools they know from programming—pairs, lists, functions, and recursion—can also capture patterns of reasoning. The Little Typer does not attempt to teach either practical programming skills or a fully rigorous approach to types. Instead, it demonstrates the most beautiful aspects as simply as possible, one step at a time.},
  isbn = {978-0-262-53643-1},
  langid = {english},
  pagetotal = {424}
}

@incollection{gibbons2003,
  title = {Origami Programming},
  booktitle = {The {{Fun}} of {{Programming}}},
  author = {Gibbons, Jeremy},
  editor = {Gibbons, Jeremy and De Moor, Oege},
  date = {2003},
  pages = {41--60},
  publisher = {Macmillan Education UK},
  location = {London},
  doi = {10.1007/978-1-349-91518-7_3},
  url = {http://link.springer.com/10.1007/978-1-349-91518-7_3},
  urldate = {2024-05-14},
  isbn = {978-0-333-99285-2 978-1-349-91518-7},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/LIIBN5ZZ/Gibbons - 2003 - Origami programming.pdf}
}

@book{goerzen2011,
  title = {Foundations of {{Python Network Programming}}: {{The}} Comprehensive Guide to Building Network Applications with {{Python}}},
  shorttitle = {Foundations of {{Python Network Programming}}},
  author = {Goerzen, John and Bower, Tim and Rhodes, Brandon},
  date = {2011-02-24},
  edition = {2nd edition},
  publisher = {Apress},
  abstract = {This second edition of Foundations of Python Network Programming targets Python 2.5 through Python 2.7, the most popular production versions of the language. Python has made great strides since Apress released the first edition of this book back in the days of Python 2.3. The advances required new chapters to be written from the ground up, and others to be extensively revised. You will learn fundamentals like IP, TCP, DNS and SSL by using working Python programs; you will also be able to familiarize yourself with infrastructure components like memcached and message queues. You can also delve into network server designs, and compare threaded approaches with asynchronous event-based solutions. But the biggest change is this edition's expanded treatment of the web. The HTTP protocol is covered in extensive detail, with each feature accompanied by sample Python code. You can use your HTTP protocol expertise by studying an entire chapter on screen scraping and you can then test lxml and BeautifulSoup against a real-world web site. The chapter on web application programming now covers both the WSGI standard for component interoperability, as well as modern web frameworks like Django. Finally, all of the old favorites from the first edition are back: E-mail protocols like SMTP, POP, and IMAP get full treatment, as does XML-RPC. You can still learn how to code Python network programs using the Telnet and FTP protocols, but you are likely to appreciate the power of more modern alternatives like the paramiko SSH2 library. If you are a Python programmer who needs to learn the network, this is the book that you want by your side.},
  langid = {english},
  pagetotal = {793}
}

@book{gonzalez2024,
  title = {{{NixOS}} in Production},
  author = {{Gonzalez}},
  date = {2024},
  publisher = {Leanpub}
}

@book{goralski2017,
  title = {The {{Illustrated Network}}: {{How TCP}}/{{IP Works}} in a {{Modern Network}}},
  shorttitle = {The {{Illustrated Network}}},
  author = {Goralski, Walter},
  date = {2017-05-12},
  edition = {2nd edition},
  publisher = {Morgan Kaufmann},
  abstract = {The Illustrated Network: How TCP/IP Works in a Modern Network, Second Edition presents an illustrated explanation on how TCP/IP works, using consistent examples from a working network configuration that includes servers, routers and workstations. Diagnostic traces allow the reader to follow the discussion with unprecedented clarity and precision. True to its title, there are 330+ diagrams and screenshots, as well as topology diagrams and a unique repeating chapter opening diagram. Illustrations are also used as end-of-chapter questions. Based on examples of a complete and modern network, all the material comes from real objects connected and running on the network.The book emphasizes the similarities across all networks, since all share similar components, from the smallest LAN to the global internet. Layered protocols are the rule, and all hosts attached to the Internet run certain core protocols to enable their applications to function properly. This second edition includes updates throughout, along with four completely new chapters that introduce developments that have occurred since the publication of the first edition, including optical networking, cloud concepts and VXLAN.Gives the reader insights into the most up-to-date network equipment, operating systems and router vendorsPresents an illustrated explanation on how TCP/IP works with consistent examples from a working network configuration that includes servers, routers, and workstationsContains over 330 Illustrations, screen shots, topology diagrams, and a unique repeating chapter opening diagram to reinforce concepts},
  isbn = {978-0-12-811027-0},
  langid = {english},
  pagetotal = {936}
}

@book{gottman2016,
  title = {Man's Guide to Women},
  author = {{Gottman} and {Abrams}},
  date = {2016},
  publisher = {Rodale Books}
}

@book{granin2020,
  title = {Functional Design and Architecture},
  author = {{Granin}},
  date = {2020},
  edition = {v.1.0.2f},
  publisher = {Leanpub}
}

@book{grinberg2017,
  title = {The {{Real Analysis Lifesaver}}: {{All}} the {{Tools You Need}} to {{Understand Proofs}}},
  shorttitle = {The {{Real Analysis Lifesaver}}},
  author = {Grinberg, Raffi},
  date = {2017-01-10},
  publisher = {Princeton University Press},
  location = {Princeton},
  abstract = {The essential "lifesaver" that every student of real analysis needsReal analysis is difficult. For most students, in addition to learning new material about real numbers, topology, and sequences, they are also learning to read and write rigorous proofs for the first time. The Real Analysis Lifesaver is an innovative guide that helps students through their first real analysis course while giving them the solid foundation they need for further study in proof-based math.Rather than presenting polished proofs with no explanation of how they were devised, The Real Analysis Lifesaver takes a two-step approach, first showing students how to work backwards to solve the crux of the problem, then showing them how to write it up formally. It takes the time to provide plenty of examples as well as guided "fill in the blanks" exercises to solidify understanding.Newcomers to real analysis can feel like they are drowning in new symbols, concepts, and an entirely new way of thinking about math. Inspired by the popular Calculus Lifesaver, this book is refreshingly straightforward and full of clear explanations, pictures, and humor. It is the lifesaver that every drowning student needs.The essential “lifesaver” companion for any course in real analysisClear, humorous, and easy-to-read styleTeaches students not just what the proofs are, but how to do them―in more than 40 worked-out examplesEvery new definition is accompanied by examples and important clarificationsFeatures more than 20 “fill in the blanks” exercises to help internalize proof techniquesTried and tested in the classroom},
  isbn = {978-0-691-17293-4},
  langid = {english},
  pagetotal = {200}
}

@report{gulbrandsen2000,
  type = {Request for Comments},
  title = {{{RFC}} 2782 {{A DNS RR}} for Specifying the Location of Services ({{DNS SRV}})},
  author = {Gulbrandsen, Arnt and Esibov, Levon},
  date = {2000-02},
  number = {RFC 2782},
  institution = {Internet Engineering Task Force},
  doi = {10.17487/RFC2782},
  url = {https://datatracker.ietf.org/doc/rfc2782},
  urldate = {2024-09-06},
  abstract = {This document describes a DNS RR which specifies the location of the server(s) for a specific protocol and domain. [STANDARDS-TRACK]},
  pagetotal = {12},
  file = {/home/hippoid/fun/zotero/storage/QAGMTIKZ/Gulbrandsen and Esibov - 2000 - A DNS RR for specifying the location of services (.pdf}
}

@book{hammackBookProof2018,
  title = {Book of {{Proof}}},
  author = {Hammack, Richard},
  date = {2018-10-01},
  edition = {3rd ed. edition},
  publisher = {Richard Hammack},
  abstract = {This book is an introduction to the language and standard proof methods of mathematics. It is a bridge from the computational courses (such as calculus or differential equations) that students typically encounter in their first year of college to a more abstract outlook. It lays a foundation for more theoretical courses such as topology, analysis and abstract algebra. Although it may be more meaningful to the student who has had some calculus, there is really no prerequisite other than a measure of mathematical maturity.Topics include sets, logic, counting, methods of conditional and non-conditional proof, disproof, induction, relations, functions, calculus proofs and infinite cardinality.},
  isbn = {978-0-9894721-2-8},
  langid = {english},
  pagetotal = {382}
}

@book{hartpence2011,
  title = {Packet {{Guide}} to {{Core Network Protocols}}},
  author = {Hartpence, Bruce},
  date = {2011-07-12},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Sebastopol, Calif},
  abstract = {Take an in-depth tour of core Internet protocols and learn how they work together to move data packets from one network to another. With this updated edition, you’ll dive into the aspects of each protocol, including operation basics and security risks, and learn the function of network hardware such as switches and routers. New chapters examine the transmission control protocol (TCP) and user datagram protocol in detail.  Ideal for beginning network engineers, each chapter in this book includes a set of review questions, as well as practical, hands-on lab exercises.  You’ll explore topics including: Basic network architecture: how protocols and functions fit together The structure and operation of the Ethernet protocol TCP/IP protocol fields, operations, and addressing used for networks The address resolution process in a typical IPv4 network Switches, access points, routers, and components that process packets TCP details, including packet content and client-server packet flow How the Internet Control Message Protocol provides error messages during network operations How network mask (subnetting) helps determine the network The operation, structure, and common uses of the user datagram protocol},
  isbn = {978-1-4493-0653-3},
  langid = {english},
  pagetotal = {261}
}

@misc{haskelltui2018,
  title = {Building Terminal User Interfaces with Haskell},
  author = {Kerchkove, Tom Sydney},
  date = {2018},
  url = {https://www.youtube.com/watch?v=GqEH8XvPZwM}
}

@article{hassan2015,
  title = {An {{Implementation Model}} for {{Interaction Nets}}},
  author = {Hassan, Abubakar and Mackie, Ian and Sato, Shinya},
  date = {2015-05-26},
  journaltitle = {Electronic Proceedings in Theoretical Computer Science},
  shortjournal = {Electron. Proc. Theor. Comput. Sci.},
  volume = {183},
  eprint = {1505.07164},
  eprinttype = {arXiv},
  eprintclass = {cs},
  pages = {66--80},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.183.5},
  url = {http://arxiv.org/abs/1505.07164},
  urldate = {2024-05-17},
  abstract = {To study implementations and optimisations of interaction net systems we propose a calculus to allow us to reason about nets, a concrete data-structure that is in close correspondence with the calculus, and a low-level language to create and manipulate this data structure. These work together so that we can describe the compilation process for interaction nets, reason about the behaviours of the implementation, and study the efficiency and properties.},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages},
  file = {/home/hippoid/fun/zotero/storage/CCC6QZNC/Hassan et al. - 2015 - An Implementation Model for Interaction Nets.pdf;/home/hippoid/fun/zotero/storage/8K87WUK8/1505.html}
}

@book{hefferon2023,
  title = {Theory of {{Computation}}: {{Making Connections}}},
  author = {Hefferon, Jim},
  date = {2023},
  url = {https://www.amazon.com/Theory-Computation-Connections-Jim-Hefferon/dp/B0CB26QHCJ},
  urldate = {2024-08-10},
  isbn = {979-8-8500-9379-2}
}

@book{hinze2023,
  title = {Introducing {{String Diagrams}}: {{The Art}} of {{Category Theory}}},
  shorttitle = {Introducing {{String Diagrams}}},
  author = {Hinze, Ralf and Marsden, Dan},
  date = {2023-08-10},
  edition = {1st edition},
  publisher = {Cambridge University Press},
  location = {Cambridge New York, NY Port Melbourne, VIC New Delhi},
  abstract = {String diagrams are powerful graphical methods for reasoning in elementary category theory. Written in an informal expository style, this book provides a self-contained introduction to these diagrammatic techniques, ideal for graduate students and researchers. Much of the book is devoted to worked examples highlighting how best to use string diagrams to solve realistic problems in elementary category theory. A range of topics are explored from the perspective of string diagrams, including adjunctions, monad and comonads, Kleisli and Eilenberg–Moore categories, and endofunctor algebras and coalgebras. Careful attention is paid throughout to exploit the freedom of the graphical notation to draw diagrams that aid understanding and subsequent calculations. Each chapter contains plentiful exercises of varying levels of difficulty, suitable for self-study or for use by instructors.},
  isbn = {978-1-009-31786-3},
  langid = {english},
  pagetotal = {195}
}

@book{hofstadter1999,
  title = {Gödel, {{Escher}}, {{Bach}}: {{An Eternal Golden Braid}}},
  shorttitle = {Gödel, {{Escher}}, {{Bach}}},
  author = {Hofstadter, Douglas R.},
  date = {1999-02-05},
  edition = {Anniversary edition},
  publisher = {Basic Books},
  location = {New York},
  abstract = {Winner of the Pulitzer PrizeA metaphorical fugue on minds and machines in the spirit of Lewis Carroll Douglas Hofstadter's book is concerned directly with the nature of "maps" or links between formal systems. However, according to Hofstadter, the formal system that underlies all mental activity transcends the system that supports it. If life can grow out of the formal chemical substrate of the cell, if consciousness can emerge out of a formal system of firing neurons, then so too will computers attain human intelligence. Gödel, Escher, Bach is a wonderful exploration of fascinating ideas at the heart of cognitive science: meaning, reduction, recursion, and much more.},
  isbn = {978-0-465-02656-2},
  langid = {english},
  pagetotal = {824}
}

@book{hopcroft2006,
  title = {Introduction to {{Automata Theory}}, {{Languages}}, {{And Computation}}},
  author = {Hopcroft, John and Motwani, Rajeev and Ullman, Jeffrey},
  date = {2006},
  isbn = {978-0-321-46225-1}
}

@article{hornik1989,
  title = {Multilayer Feedforward Networks Are Universal Approximators},
  author = {Hornik, Kurt and Stinchcombe, Maxwell and White, Halbert},
  date = {1989-01-01},
  journaltitle = {Neural Networks},
  shortjournal = {Neural Networks},
  volume = {2},
  number = {5},
  pages = {359--366},
  issn = {0893-6080},
  doi = {10.1016/0893-6080(89)90020-8},
  url = {https://www.sciencedirect.com/science/article/pii/0893608089900208},
  urldate = {2024-06-05},
  abstract = {This paper rigorously establishes that standard multilayer feedforward networks with as few as one hidden layer using arbitrary squashing functions are capable of approximating any Borel measurable function from one finite dimensional space to another to any desired degree of accuracy, provided sufficiently many hidden units are available. In this sense, multilayer feedforward networks are a class of universal approximators.},
  keywords = {Back-propagation networks,Feedforward networks,Mapping networks,Network representation capability,Sigma-Pi networks,Squashing functions,Stone-Weierstrass Theorem,Universal approximation},
  file = {/home/hippoid/fun/zotero/storage/YRQ5AJLB/0893608089900208.html}
}

@book{houston2009,
  title = {How to {{Think Like}} a {{Mathematician}}: {{A Companion}} to {{Undergraduate Mathematics}}},
  shorttitle = {How to {{Think Like}} a {{Mathematician}}},
  author = {Houston, Kevin},
  date = {2009-02-23},
  edition = {1st edition},
  publisher = {Cambridge University Press},
  location = {Cambridge New York, NY Port Melbourne, VIC Delhi Singapore},
  abstract = {Looking for a head start in your undergraduate degree in mathematics? Maybe you've already started your degree and feel bewildered by the subject you previously loved? Don't panic! This friendly companion will ease your transition to real mathematical thinking. Working through the book you will develop an arsenal of techniques to help you unlock the meaning of definitions, theorems and proofs, solve problems, and write mathematics effectively. All the major methods of proof - direct method, cases, induction, contradiction and contrapositive - are featured. Concrete examples are used throughout, and you'll get plenty of practice on topics common to many courses such as divisors, Euclidean algorithms, modular arithmetic, equivalence relations, and injectivity and surjectivity of functions. The material has been tested by real students over many years so all the essentials are covered. With over 300 exercises to help you test your progress, you'll soon learn how to think like a mathematician.},
  isbn = {978-0-521-71978-0},
  langid = {english},
  pagetotal = {274}
}

@book{hudak2018,
  title = {The Haskell School of Music: {{From}} Signals to Symphonies},
  author = {Hudak, Paul and Quick, Donya},
  date = {2018},
  edition = {1},
  publisher = {Cambridge University Press}
}

@article{hutton1999,
  title = {A {{Tutorial}} on the {{Universality}} and {{Expressiveness}} of {{Fold}}},
  author = {Hutton, Graham},
  date = {1999-09-15},
  journaltitle = {Journal of Functional Programming},
  shortjournal = {Journal of Functional Programming},
  volume = {9},
  doi = {10.1017/S0956796899003500},
  abstract = {In functional programming, fold is a standard operator that encapsulates a simple pattern of recursion for processing lists. This article is a tutorial on two key aspects of the fold operator for lists. First of all, we emphasize the use of the universal property of fold both as a proof principle that avoids the need for inductive proofs, and as a definition principle that guides the transformation of recursive functions into definitions using fold. Secondly, we show that even though the pattern of recursion encapsulated by fold is simple, in a language with tuples and functions as first-class values the fold operator has greater expressive power than might first be expected. 1 Introduction Many programs that involve repetition are naturally expressed using some form of recursion, and properties proved of such programs using some form of induction. Indeed, in the functional approach to programming, recursion and induction are the primary tools for defining and proving properties of p...},
  file = {/home/hippoid/fun/zotero/storage/FCZDNEQM/Hutton - 1999 - A Tutorial on the Universality and Expressiveness .pdf}
}

@book{hutton2016,
  title = {Programming in Haskell},
  author = {Hutton, Graham},
  date = {2016},
  edition = {2nd edition},
  publisher = {Cambridge University Press}
}

@book{huyenAIEngineeringBuilding2025,
  title = {{{AI Engineering}}: {{Building Applications}} with {{Foundation Models}}},
  shorttitle = {{{AI Engineering}}},
  author = {Huyen, Chip},
  date = {2025-01-07},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Sebastopol},
  abstract = {Recent breakthroughs in AI have not only increased demand for AI products, they've also lowered the barriers to entry for those who want to build AI products. The model-as-a-service approach has transformed AI from an esoteric discipline into a powerful development tool that anyone can use. Everyone, including those with minimal or no prior AI experience, can now leverage AI models to build applications. In this book, author Chip Huyen discusses AI engineering: the process of building applications with readily available foundation models.  The book starts with an overview of AI engineering, explaining how it differs from traditional ML engineering and discussing the new AI stack. The more AI is used, the more opportunities there are for catastrophic failures, and therefore, the more important evaluation becomes. This book discusses different approaches to evaluating open-ended models, including the rapidly growing AI-as-a-judge approach.  AI application developers will discover how to navigate the AI landscape, including models, datasets, evaluation benchmarks, and the seemingly infinite number of use cases and application patterns. You'll learn a framework for developing an AI application, starting with simple techniques and progressing toward more sophisticated methods, and discover how to efficiently deploy these applications. Understand what AI engineering is and how it differs from traditional machine learning engineering Learn the process for developing an AI application, the challenges at each step, and approaches to address them Explore various model adaptation techniques, including prompt engineering, RAG, fine-tuning, agents, and dataset engineering, and understand how and why they work Examine the bottlenecks for latency and cost when serving foundation models and learn how to overcome them Choose the right model, dataset, evaluation benchmarks, and metrics for your needs Chip Huyen works to accelerate data analytics on GPUs at Voltron Data. Previously, she was with Snorkel AI and NVIDIA, founded an AI infrastructure startup, and taught Machine Learning Systems Design at Stanford. She's the author of the book Designing Machine Learning Systems, an Amazon bestseller in AI. AI Engineering builds upon and is complementary to Designing Machine Learning Systems (O'Reilly).},
  isbn = {978-1-0981-6630-4},
  langid = {english},
  pagetotal = {532}
}

@article{ierusalimschy2018,
  title = {A Look at the Design of {{Lua}}},
  author = {Ierusalimschy, Roberto and De Figueiredo, Luiz Henrique and Celes, Waldemar},
  date = {2018-10-26},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {61},
  number = {11},
  pages = {114--123},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/3186277},
  url = {https://dl.acm.org/doi/10.1145/3186277},
  urldate = {2024-05-02},
  abstract = {Simplicity, small size, portability, and embeddability set Lua apart from other scripting languages.},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/6L6V6CKT/Ierusalimschy et al. - 2018 - A look at the design of Lua.pdf}
}

@online{IntroductionTypeLevel2021,
  title = {An {{Introduction}} to {{Type Level Programming}}},
  date = {2021-08-25},
  url = {https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html},
  urldate = {2025-02-04},
  abstract = {Learn about type level programming by building a custom theming engine.},
  langid = {english},
  organization = {RebeccaSkinner.net},
  file = {/home/hippoid/fun/zotero/storage/MYSMDVAL/2021-08-25-introduction-to-type-level-programming.html}
}

@book{jackson2016,
  title = {Software {{Abstractions}}, Revised Edition: {{Logic}}, {{Language}}, and {{Analysis}}},
  shorttitle = {Software {{Abstractions}}, Revised Edition},
  author = {Jackson, Daniel},
  date = {2016-02-12},
  edition = {Revised edition},
  publisher = {MIT Press},
  location = {Cambridge, Massachusetts London, England},
  abstract = {An approach to software design that introduces a fully automated analysis giving designers immediate feedback, now featuring the latest version of the Alloy language. In Software Abstractions Daniel Jackson introduces an approach to software design that draws on traditional formal methods but exploits automated tools to find flaws as early as possible. This approach—which Jackson calls “lightweight formal methods” or “agile modeling”—takes from formal specification the idea of a precise and expressive notation based on a tiny core of simple and robust concepts but replaces conventional analysis based on theorem proving with a fully automated analysis that gives designers immediate feedback. Jackson has developed Alloy, a language that captures the essence of software abstractions simply and succinctly, using a minimal toolkit of mathematical notions. This revised edition updates the text, examples, and appendixes to be fully compatible with Alloy 4.},
  isbn = {978-0-262-52890-0},
  langid = {english},
  pagetotal = {372}
}

@book{jackson2021,
  title = {The {{Essence}} of {{Software}}: {{Why Concepts Matter}} for {{Great Design}}},
  shorttitle = {The {{Essence}} of {{Software}}},
  author = {Jackson, Daniel},
  date = {2021-11-16},
  publisher = {Princeton University Press},
  abstract = {A revolutionary concept-based approach to thinking about, designing, and interacting with softwareAs our dependence on technology increases, the design of software matters more than ever before. Why then is so much software flawed? Why hasn’t there been a systematic and scalable way to create software that is easy to use, robust, and secure?Examining these issues in depth, The Essence of Software introduces a theory of software design that gives new answers to old questions. Daniel Jackson explains that a software system should be viewed as a collection of interacting concepts, breaking the functionality into manageable parts and providing a new framework for thinking about design. Through this radical and original perspective, Jackson lays out a practical and coherent path, accessible to anyone—from strategist and marketer to UX designer, architect, or programmer—for making software that is empowering, dependable, and a delight to use.Jackson explores every aspect of concepts—what they are and aren’t, how to identify them, how to define them, and more—and offers prescriptive principles and practical tips that can be applied cost-effectively in a wide range of domains. He applies these ideas to contemporary software designs, drawing examples from leading software manufacturers such as Adobe, Apple, Dropbox, Facebook, Google, Microsoft, Twitter, and others. Jackson shows how concepts let designers preserve and reuse design knowledge, rather than starting from scratch in every project.An argument against the status quo and a guide to improvement for both working designers and novices to the field, The Essence of Software brings a fresh approach to software and its creation.},
  langid = {english},
  pagetotal = {312}
}

@article{jacobs1999,
  title = {A {{Tutorial}} on ({{Co}}){{Algebras}} and ({{Co}}){{Induction}}},
  author = {Jacobs, Bart and Rutten, Jan},
  date = {1999-10-06},
  journaltitle = {Bulletin of the EATCS},
  shortjournal = {Bulletin of the EATCS},
  volume = {62},
  abstract = {. Algebraic structures which are generated by a collection of constructors--- like natural numbers (generated by a zero and a successor) or finite lists and trees--- are of well-established importance in computer science. Formally, they are initial algebras. Induction is used both as a definition principle, and as a proof principle for such structures. But there are also important dual "coalgebraic" structures, which do not come equipped with constructor operations but with what are sometimes called "destructor" operations (also called observers, accessors, transition maps, or mutators). Spaces of infinite data (including, for example, infinite lists, and non-well-founded sets) are generally of this kind. In general, dynamical systems with a hidden, black-box state space, to which a user only has limited access via specified (observer or mutator) operations, are coalgebras of various kinds. Such coalgebraic systems are common in computer science. And "coinduction" is the appropriate te...}
}

@book{jansson2022,
  title = {Domain-{{Specific Languages}} of {{Mathematics}}},
  author = {Jansson, Patrik and Ionescu, Cezar and Bernardy, Jean-Philippe},
  date = {2022-01-05},
  publisher = {College Publications},
  abstract = {The main idea behind this book is to encourage readers to approach  mathematical domains from a functional programming perspective: to  identify the main functions and types involved and, when necessary, to  introduce new abstractions; to give calculational proofs; to pay  attention to the syntax of the mathematical expressions; and, finally,  to organize the resulting functions and types in domain-specific languages. The book is recommended for developers who are learning mathematics and  would like to use Haskell to make sense of definitions and theorems. It  is also a book for the mathematically interested who wants to explore  functional programming and domain-specific languages. The book helps put  into perspective the domains of Mathematics and Functional Programming  and shows how Computer Science and Mathematics are usefully taught together.},
  isbn = {978-1-84890-388-3},
  langid = {english},
  pagetotal = {268}
}

@book{johnston2019,
  title = {Programming {{Quantum Computers}}: {{Essential Algorithms}} and {{Code Samples}}},
  shorttitle = {Programming {{Quantum Computers}}},
  author = {Johnston, Eric R. and Harrigan, Nic and Gimeno-Segovia, Mercedes},
  date = {2019-08-13},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Sebastopal, CA},
  abstract = {Quantum computers are poised to kick-start a new computing revolution―and you can join in right away. If you’re in software engineering, computer graphics, data science, or just an intrigued computerphile, this book provides a hands-on programmer’s guide to understanding quantum computing. Rather than labor through math and theory, you’ll work directly with examples that demonstrate this technology’s unique capabilities.  Quantum computing specialists Eric Johnston, Nic Harrigan, and Mercedes Gimeno-Segovia show you how to build the skills, tools, and intuition required to write quantum programs at the center of applications. You’ll understand what quantum computers can do and learn how to identify the types of problems they can solve.  This book includes three multichapter sections: Programming for a QPU―Explore core concepts for programming quantum processing units, including how to describe and manipulate qubits and how to perform quantum teleportation. QPU Primitives―Learn algorithmic primitives and techniques, including amplitude amplification, the Quantum Fourier Transform, and phase estimation. QPU Applications―Investigate how QPU primitives are used to build existing applications, including quantum search techniques and Shor’s factoring algorithm.},
  isbn = {978-1-4920-3968-6},
  langid = {english},
  pagetotal = {333}
}

@article{jones2010,
  title = {Tackling the {{Awkward Squad}}: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in {{Haskell}}},
  author = {Jones, Simon Peyton},
  date = {2010},
  abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/94SX2HC5/Jones - Tackling the Awkward Squad monadic inputoutput, concurrency, exceptions, and foreign-language call.pdf}
}

@book{jonesandblackheath2016,
  title = {Functional Reactive Programming},
  author = {Jones, Anthony and Blackheath, Stephen},
  date = {2016}
}

@book{jorgenson2023,
  title = {The {{Anthology}} of {{Balaji}}: {{A Guide}} to {{Technology}}, {{Truth}}, and {{Building}} the {{Future}}},
  shorttitle = {The {{Anthology}} of {{Balaji}}},
  author = {Jorgenson, Eric and Srinivasan, Balaji},
  date = {2023-10-24},
  publisher = {Smart Friends Publishing},
  abstract = {How do you thrive in an unknown future?When you can’t see past the world we have now, look to visionaries like Balaji Srinivasan. His ideas show us how to build a healthier, brighter, and more technologically-advanced humanity.In The Anthology of Balaji: A Guide to Technology, Truth, and Building the Future, Eric Jorgenson curates a collection of Balaji’s wisdom from his entire career. In “Technology” you will see how technology shapes our world today and the ways it could shape our future. In “Truth” you learn how to think for yourself through the constant clamor of information and media. Finally, in “Building the Future,” you will learn how to wield Technology and Truth to change your life, change your community, and—maybe—change the future of our species.This guide will help you pick the next great investment, start a billion-dollar company, or even a new country. The Anthology of Balaji helps you visualize and build your brightest future.},
  langid = {english},
  pagetotal = {273}
}

@book{kaleniuk2023,
  title = {Geometry for Programmers},
  author = {Kaleniuk, Oleksandr},
  date = {2023},
  publisher = {Manning Publications},
  isbn = {9781633439607}
}

@book{kirch2000,
  title = {The {{Linux Network Administrator}}'s {{Guide}}},
  author = {Kirch, Olaf and Dawson, Terry},
  date = {2000-03},
  edition = {Second},
  url = {https://tldp.org/LDP/nag2/index.html},
  abstract = {This book was written to provide a single reference for network administration in a Linux environment. Beginners and experienced users alike should find the information they need to cover nearly all important administration activities required to manage a Linux network configuration. The possible range of topics to cover is nearly limitless, so of course it has been impossible to include everything there is to say on all subjects. We've tried to cover the most important and common ones. We've found that beginners to Linux networking, even those with no prior exposure to Unix-like operating systems, have found this book good enough to help them successfully get their Linux network configurations up and running and get them ready to learn more.},
  isbn = {1-56592-400-2}
}

@book{klein2013,
  title = {Coding the {{Matrix}}: {{Linear Algebra}} through {{Applications}} to {{Computer Science}}},
  shorttitle = {Coding the {{Matrix}}},
  author = {Klein, Philip N.},
  date = {2013-09-03},
  edition = {8.4.2013 edition},
  publisher = {Newtonian Press},
  location = {Newton, Mass.},
  abstract = {An engaging introduction to vectors and matrices and the algorithms that operate on them, intended for the student who knows how to program. Mathematical concepts and computational problems are motivated by applications in computer science. The reader learns by doing, writing programs to implement the mathematical concepts and using them to carry out tasks and explore the applications. Examples include: error-correcting codes, transformations in graphics, face detection, encryption and secret-sharing, integer factoring, removing perspective from an image, PageRank (Google's ranking algorithm), and cancer detection from cell features. A companion web site, codingthematrix.com provides data and support code. Most of the assignments can be auto-graded online. Over two hundred illustrations, including a selection of relevant xkcd comics.  Chapters: The Function, The Field, The Vector, The Vector Space, The Matrix, The Basis, Dimension, Gaussian Elimination, The Inner Product, Special Bases, The Singular Value Decomposition, The Eigenvector, The Linear Program},
  isbn = {978-0-615-88099-0},
  langid = {english},
  pagetotal = {548}
}

@book{knodel2020,
  title = {How the {{Internet Really Works}}: {{An Illustrated Guide}} to {{Protocols}}, {{Privacy}}, {{Censorship}}, and {{Governance}}},
  shorttitle = {How the {{Internet Really Works}}},
  author = {Knodel, Mallory and Uhlig, Ulrike and family=Oever, given=Niels, prefix=ten, useprefix=false and Cath, Corinne},
  date = {2020-12-11},
  edition = {Illustrated edition},
  publisher = {No Starch Press},
  location = {San Francisco},
  abstract = {An accessible, comic book-like, illustrated introduction to how the internet works under the hood, designed to give people a basic understanding of the technical aspects of the Internet that they need in order to advocate for digital rights.The internet has profoundly changed interpersonal communication, but most of us don't really understand how it works. What enables information to travel across the internet? Can we really be anonymous and private online? Who controls the internet, and why is that important? And... what's with all the cats?How the Internet Really Works answers these questions and more. Using clear language and whimsical illustrations, the authors translate highly technical topics into accessible, engaging prose that demystifies the world's most intricately linked computer network. Alongside a feline guide named Catnip, you'll learn about:The "How-What-Why" of nodes, packets, and internet protocolsCryptographic techniques to ensure the secrecy and integrity of your dataCensorship, ways to monitor it, and means for circumventing itCybernetics, algorithms, and how computers make decisionsCentralization of internet power, its impact on democracy, and how it hurts human rightsInternet governance, and ways to get involvedThis book is also a call to action, laying out a roadmap for using your newfound knowledge to influence the evolution of digitally inclusive, rights-respecting internet laws and policies.Whether you're a citizen concerned about staying safe online, a civil servant seeking to address censorship, an advocate addressing worldwide freedom of expression issues, or simply someone with a cat-like curiosity about network infrastructure, you will be delighted -- and enlightened -- by Catnip's felicitously fun guide to understanding how the internet really works!},
  isbn = {978-1-7185-0029-7},
  langid = {english},
  pagetotal = {120}
}

@book{kottwitz2023,
  title = {{{LaTeX}} Graphics with {{TikZ}}},
  author = {Kottwitz, Stefan},
  date = {2023},
  publisher = {Packt Publishing},
  url = {https://www.amazon.com/LATEX-Graphics-TikZ-Practitioners-diagrams/dp/1804618233/},
  isbn = {978-1-80461-823-3}
}

@book{kun2018,
  title = {Programmer's Introduction to Math},
  author = {Kun, Jeremy},
  date = {2018}
}

@book{kurose2022,
  title = {Computer {{Networking Top-Down Approach}}},
  author = {Kurose, James F.},
  date = {2022-01-01},
  publisher = {Pearson},
  abstract = {The 8th Edition of the popular Computer A Top Down Approach builds on the authors’ long tradition of teaching this complex subject through a layered approach in a “top-down manner.” The text works its way from the application layer down toward the physical layer, motivating students by exposing them to important concepts early in their study of networking. Focusing on the Internet and the fundamentally important issues of networking, this text provides an excellent foundation for students in computer science and electrical engineering, without requiring extensive knowledge of programming or mathematics. The 8th Edition has been updated to reflect the most important and exciting recent advances in networking, including software-defined networking (SDN) and the rapid adoption of 4G/5G networks and the mobile applications they enable.},
  isbn = {978-93-5606-131-6},
  langid = {english},
  pagetotal = {820}
}

@article{lafont1997,
  title = {Interaction {{Combinators}}},
  author = {Lafont, Yves},
  date = {1997-08},
  journaltitle = {Information and Computation},
  shortjournal = {Information and Computation},
  volume = {137},
  number = {1},
  pages = {69--101},
  issn = {08905401},
  doi = {10.1006/inco.1997.2643},
  url = {https://linkinghub.elsevier.com/retrieve/pii/S0890540197926432},
  urldate = {2024-05-17},
  abstract = {It is shown that a very simple system ofinteraction combinators, with only three symbols and six rules, is a universal model of distributed computation, in a sense that will be made precise. This paper is the continuation of the author's work oninteraction nets, inspired by Girard's proof nets forlinear logic, but no preliminary knowledge of these topics is required for its reading.},
  langid = {english}
}

@book{lamport2002,
  title = {Specifying {{Systems}}: {{The TLA}}+ {{Language}} and {{Tools}} for {{Hardware}} and {{Software Engineers}}},
  shorttitle = {Specifying {{Systems}}},
  author = {Lamport, Leslie},
  date = {2002-07-19},
  edition = {1st edition},
  publisher = {Addison-Wesley Professional},
  location = {Boston},
  abstract = {This book is the distillation of over 25 years of work by one of the world's most renowned computer scientists. A specification is a written description of what a system is supposed to do, plus a way of checking to make sure that it works. Specifying a system helps us understand it. It's a good idea to understand a system before building it, so it's a good idea to write a specification of a system before implementing it. The most effective tool to describe a specification is the Temporal Logic of Actions, or TLA, because it provides a mathematical, i.e. precise, foundation for describing systems. TLA+ is the language the author developed to write the mathematical specifications. TLA+ is available freely on the web. It can be used for both software and hardware. In fact, Intel is using TLA+ with great success in the design of a new chip. The book is divided into four parts. The first part contains all that most programmers and engineers need to know about writing specifications. The second part contains more advanced material for more sophisticated readers. The third and fourth parts comprise a reference manual for TLA+ - both the language itself as well as its tools.},
  isbn = {978-0-321-14306-8},
  langid = {english},
  pagetotal = {384}
}

@article{launchbury1994,
  title = {Lazy Functional State Threads},
  author = {Launchbury, John and Jones, Simon Peyton},
  date = {1994}
}

@article{lee:1998,
  title = {Proofs about a {{Folklore Let-Polymorphic}} Type Inference Algorithm},
  author = {Lee, O and Yi, K},
  date = {1998},
  journaltitle = {ACM Transactions on Programming Languages and System},
  volume = {20},
  number = {4},
  pages = {707--723},
  doi = {10.1145.291891.291.892}
}

@book{lengyelFoundationsGameEngine2016,
  title = {Foundations of {{Game Engine Development}}, {{Volume}} 1: {{Mathematics}}},
  shorttitle = {Foundations of {{Game Engine Development}}, {{Volume}} 1},
  author = {Lengyel, Eric},
  date = {2016-09-11},
  edition = {1st edition},
  publisher = {Terathon Software LLC},
  location = {Lincoln, California},
  abstract = {The first volume of Foundations of Game Engine Development discusses the mathematics needed by engineers who work on games or other types of virtual simulations. The book begins with conventional treatments of topics such as linear algebra, transforms, and geometry. Then, it introduces Grassmann algebra and geometric algebra to provide a much deeper understanding of the subject matter and highlight the places where traditional arithmetic with vectors, matrices, quaternions, etc., fits into a larger picture. Includes exercises.},
  isbn = {978-0-9858117-4-7},
  langid = {english},
  pagetotal = {200}
}

@book{lepore2001meaning,
  title = {Meaning and Argument: {{An}} Introduction to Logic through Language},
  author = {Lepore, Ernest},
  date = {2001},
  edition = {Revised edition},
  publisher = {Blackwell Publishers},
  location = {Malden, MA}
}

@book{levesque2012,
  title = {Thinking as {{Computation}}},
  author = {Levesque, Hector},
  date = {2012}
}

@book{maccormick2018,
  title = {What {{Can Be Computed}}?: {{A Practical Guide}} to the {{Theory}} of {{Computation}}},
  shorttitle = {What {{Can Be Computed}}?},
  author = {MacCormick, John},
  date = {2018-05-01},
  publisher = {Princeton University Press},
  location = {Princeton, New Jersey},
  abstract = {An accessible and rigorous textbook for introducing undergraduates to computer science theoryWhat Can Be Computed? is a uniquely accessible yet rigorous introduction to the most profound ideas at the heart of computer science. Crafted specifically for undergraduates who are studying the subject for the first time, and requiring minimal prerequisites, the book focuses on the essential fundamentals of computer science theory and features a practical approach that uses real computer programs (Python and Java) and encourages active experimentation. It is also ideal for self-study and reference.The book covers the standard topics in the theory of computation, including Turing machines and finite automata, universal computation, nondeterminism, Turing and Karp reductions, undecidability, time-complexity classes such as P and NP, and NP-completeness, including the Cook-Levin Theorem. But the book also provides a broader view of computer science and its historical development, with discussions of Turing's original 1936 computing machines, the connections between undecidability and Gödel's incompleteness theorem, and Karp's famous set of twenty-one NP-complete problems.Throughout, the book recasts traditional computer science concepts by considering how computer programs are used to solve real problems. Standard theorems are stated and proven with full mathematical rigor, but motivation and understanding are enhanced by considering concrete implementations. The book's examples and other content allow readers to view demonstrations of―and to experiment with―a wide selection of the topics it covers. The result is an ideal text for an introduction to the theory of computation.An accessible and rigorous introduction to the essential fundamentals of computer science theory, written specifically for undergraduates taking introduction to the theory of computationFeatures a practical, interactive approach using real computer programs (Python in the text, with forthcoming Java alternatives online) to enhance motivation and understandingGives equal emphasis to computability and complexityIncludes special topics that demonstrate the profound nature of key ideas in the theory of computationLecture slides and Python programs are available at whatcanbecomputed.com},
  isbn = {978-0-691-17066-4},
  langid = {english},
  pagetotal = {408}
}

@book{macdonald2011,
  title = {Linear and Geometric Algebra},
  author = {Macdonald, Alan},
  date = {2011},
  publisher = {CreateSpace Independent Publishing Platform}
}

@book{maguire2018,
  title = {Thinking with Types: {{Type}} Level Programming in Haskell},
  author = {{Sandy Maguire}},
  date = {2018}
}

@book{maguire2020,
  title = {Algebra Driven Design},
  author = {{Sandy Maguire}},
  date = {2020}
}

@book{marlow2013,
  title = {Parallel and {{Concurrent Programming}} in {{Haskell}}: {{Techniques}} for {{Multicore}} and {{Multithreaded Programming}}},
  shorttitle = {Parallel and {{Concurrent Programming}} in {{Haskell}}},
  author = {Marlow, Simon},
  date = {2013-09-17},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Beijing Köln},
  abstract = {If you have a working knowledge of Haskell, this hands-on book shows you how to use the language’s many APIs and frameworks for writing both parallel and concurrent programs. You’ll learn how parallelism exploits multicore processors to speed up computation-heavy programs, and how concurrency enables you to write programs with threads for multiple interactions.  Author Simon Marlow walks you through the process with lots of code examples that you can run, experiment with, and extend. Divided into separate sections on Parallel and Concurrent Haskell, this book also includes exercises to help you become familiar with the concepts presented: Express parallelism in Haskell with the Eval monad and Evaluation Strategies Parallelize ordinary Haskell code with the Par monad Build parallel array-based computations, using the Repa library Use the Accelerate library to run computations directly on the GPU Work with basic interfaces for writing concurrent code Build trees of threads for larger and more complex programs Learn how to build high-speed concurrent network servers Write distributed programs that run on multiple machines in a network},
  isbn = {978-1-4493-3594-6},
  langid = {english},
  pagetotal = {319}
}

@book{martin2023,
  title = {Sockets and Pipes},
  author = {{Chris Martin}},
  date = {2023},
  publisher = {LeanPub}
}

@book{maxmiller2015,
  title = {Mate: {{Become}} the Man Women Want},
  author = {{Max} and {Miller}},
  date = {2015},
  publisher = {{Little Brown and Company}}
}

@article{maxwell1865,
  title = {A {{Dynamical Theory}} of the {{Electromagnetic Field}}},
  author = {Maxwell, J. Clerk},
  date = {1865},
  journaltitle = {Philosophical Transactions of the Royal Society of London},
  volume = {155},
  eprint = {108892},
  eprinttype = {jstor},
  pages = {459--512},
  publisher = {The Royal Society},
  issn = {0261-0523},
  url = {https://www.jstor.org/stable/108892},
  urldate = {2024-06-07},
  file = {/home/hippoid/fun/zotero/storage/XS9RY94P/Maxwell - 1865 - A Dynamical Theory of the Electromagnetic Field.pdf}
}

@article{mccarthy1960,
  title = {Recursive Functions of Symbolic Expressions and Their Computation by Machine, {{Part I}}},
  author = {McCarthy, John},
  date = {1960-04},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  volume = {3},
  number = {4},
  pages = {184--195},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/367177.367199},
  url = {https://dl.acm.org/doi/10.1145/367177.367199},
  urldate = {2024-05-08},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/7NR84CCS/McCarthy - 1960 - Recursive functions of symbolic expressions and th.pdf}
}

@book{mcdowell2024,
  title = {Acing the {{CCNA Exam}}, {{Volume}} 1: {{Fundamentals}} and {{Protocols}}},
  shorttitle = {Acing the {{CCNA Exam}}, {{Volume}} 1},
  author = {McDowell, Jeremy},
  date = {2024-08-13},
  publisher = {Manning},
  location = {Shelter Island, NY},
  abstract = {Master the core fundamentals and protocols covered in the Cisco Certified Network Associate (CCNA) exam!Acing the CCNA Exam helps you prepare for the CCNA exam by learning vital skills like:  How to study for the CCNAIP routing, addressing, and subnettingVLANs, trunking protocols, and EtherChannelStatic and dynamic routing protocols (OSPF) Passing the CCNA is the perfect way to kickstart or advance your career in IT, networking, and systems administration. Inside this accessible guide, you’ll find the secrets to nailing even the most perplexing exam topics. You’ll build your fluency in networking chapter-by-chapter, until you have both the knowledge to take on the CCNA, and the skills to work effectively as an IT professional.  Purchase of the print book includes a free eBook in PDF and ePub formats from Manning Publications.  About the technology  The Cisco Certified Network Associate (CCNA) certification is the gold-standard credential for aspiring network administrators working with industry-standard Cisco hardware. There’s a lot to learn, and this book is your expert guide. Acing the CCNA Exam, Volume 1 introduces the foundations of Cisco networking technology, including the core protocols for IP routing, addressing, trunking, and more.  About the book  Acing the CCNA Exam, Volume 1 teaches you the technical skills you need, along with must-know test secrets, to ace the CCNA the very first time. You’ll love networking guru Jeremy McDowell’s down-to-earth writing and handy network diagrams as he leads you through the most challenging parts of the exam. In this first volume, you’ll master ports and routers, IP access control lists, and other core topics you’ll face in the first part of the certification.  What's inside  How to study for the CCNAIP routing, addressing, and subnettingVLANs, trunking protocols, and EtherChannelStatic and dynamic routing protocols (OSPF) About the reader  No networking skills required!  About the author  Jeremy McDowell is a senior network engineer and an experienced teacher. His YouTube channel, Jeremy’s IT Lab, has helped hundreds of thousands prepare for the CCNA. The technical editor on this book was Jeremy Cioara.  Table of Contents 1 Introduction to the CCNA Part 1 2 Network devices 3 Cables, connectors, and ports 4 The TCP/IP networking model 5 The Cisco IOS CLI 6 Ethernet LAN switching 7 IPv4 addressing 8 Router and switch interfaces Part 2 9 Routing fundamentals 10 The life of a packet 157 11 Subnetting IPv4 networks Part 3 12 VLANs 13 Dynamic Trunking Protocol and VLAN Trunking Protocol 14 Spanning Tree Protocol 15 Rapid Spanning Tree Protocol 16 EtherChannel Part 4 17 Dynamic routing 18 Open Shortest Path First 19 First hop redundancy protocols Part 5 20 IPv6 addressing 21 IPv6 routing Part 6 22 Transmission Control Protocol and User Datagram Protocol 23 Standard access control lists 24 Extended access control lists A Exam topics reference table B CLI command reference table C Chapter quiz questions D Chapter quiz answers},
  isbn = {978-1-63343-767-8},
  langid = {english},
  pagetotal = {608}
}

@book{mcdowell2024a,
  title = {Acing the {{CCNA Exam}}, {{Volume}} 2: {{Advanced Networking}} and {{Security}}},
  shorttitle = {Acing the {{CCNA Exam}}, {{Volume}} 2},
  author = {McDowell, Jeremy},
  date = {2024-08-13},
  publisher = {Manning},
  location = {Shelter Island, NY},
  abstract = {Master the most challenging elements of the CCNA exam to pass on your very first try!The CCNA goes deep on networking and security. Acing the CCNA Exam, Volume 2 gives you exactly what you need to navigate the most challenging parts of the exam. Author Jeremy McDowell’s CCNA courses have helped hundreds of thousands of students pass their exams. This book distills that expertise into an easy-to-follow guide.  In Acing the CCNA Exam, Volume 2—Advanced Networking and Security you’ll dig into tough topics like:  • Security concepts and common threats • Ethernet and wireless LANs (Wi-Fi) and network automation • Essential network services like DHCP and DNS • WAN, LAN, and wireless architectures  The Cisco Certified Network Associate is the gold-standard credential for network administrators. It demands an in-depth knowledge of complex network internals, including security, wireless architectures, and more. Acing the CCNA Exam, Volume 2—Advanced Networking and Security builds on the basics you learn in Volume 1 to help you study and prepare for the most challenging parts of the test. Purchase of the print book includes a free eBook in PDF and ePub formats from Manning Publications.  About the Technology  The Cisco Certified Network Associate (CCNA) certification is the gold-standard credential for aspiring network administrators working with industry-standard Cisco hardware. The CCNA exam goes deep, and this book will help you prepare for the most difficult parts of the test. Acing the CCNA Exam, Volume 2 covers the demanding topics of network security, wired and wireless LANs, DNS, and more.  About the Book  Acing the CCNA Exam, Volume 2 introduces the technical skills and secrets you need to navigate the most challenging topics on the CCNA exam. CCNA expert Jeremy McDowell guides you through network services and architectures, automation, and other advanced topics you’ll face in the later parts of the test. His down-to-earth writing, diagrams, and clear examples make even the most complex topics easy to understand.  What’s Inside  • Security concepts and common threats • Ethernet and wireless LANs (Wi-Fi) and network automation • Essential network services like DHCP and DNS • WAN, LAN, and wireless architectures  About the Readers  This book builds on Acing the CCNA Exam, Volume 1.  About the Author  Jeremy McDowell is a senior network engineer and an experienced teacher. His YouTube channel, Jeremy’s IT Lab, has helped hundreds of thousands prepare for the CCNA. The technical editor on this book was Jeremy Cioara.  Table of Contents Part 1 1 Cisco Discovery Protocol and Link Layer Discovery Protocol 2 Network Time Protocol 3 Domain Name System 4 Dynamic Host Configuration Protocol 5 Secure Shell 6 Simple Network Management Protocol 7 Syslog 8 Trivial File Transfer Protocol and File Transfer Protocol 9 Network Address Translation 10 Quality of service Part 2 11 Security concepts 12 Port Security 13 DHCP Snooping 14 Dynamic ARP Inspection Part 3 15 LAN architectures 16 WAN architectures 17 Virtualization and cloud Part 4 18 Wireless LAN fundamentals 19 Wireless LAN architectures 20 Wireless LAN security 21 Wireless LAN configuration Part 5 22 Network automation 23 REST APIs 24 Data formats 25 Ansible and Terraform A Exam topics reference table B CLI command reference table C Chapter quiz questions D Chapter quiz answers},
  isbn = {978-1-63343-578-0},
  langid = {english},
  pagetotal = {592}
}

@book{mckee1997,
  title = {Story: {{Substance}}, Structure, Style and the Principles of Screenwriting},
  author = {McKee, Robert},
  date = {1997-11-25},
  publisher = {ReganBooks},
  location = {New York, NY},
  isbn = {978-0-06-039168-3}
}

@book{mcmullen2020,
  title = {Logarithms and {{Exponentials Essential Skills Practice Workbook}} with {{Answers}}},
  author = {McMullen, Chris},
  date = {2020-07-27},
  publisher = {Zishka Publishing},
  abstract = {Master essential logarithm and exponential skills through helpful explanations, instructive examples, and plenty of practice exercises with answers. Authored by experienced teacher, Chris McMullen, Ph.D., this self-study math workbook covers:logarithms of various bases and natural logarithmsthe change of base formulalogarithm rules like the sum and difference formulasexponential functionshyperbolic functions and their inversesgraphs of logarithms, exponentials, and hyperbolic functionsa concise review of exponents in the first chapterEuler’s numberapplications such as population growth, continuously compounded interest, and radioactive nuclear decaysan introduction to complex numbers in the last chapteran optional chapter covering the calculus of logarithms, exponentials, and hyperbolic functionsThe author, Chris McMullen, Ph.D., has over twenty years of experience teaching math skills to physics students. He prepared this workbook of the Improve Your Math Fluency series to share his strategies for working with logarithms and exponentials.},
  isbn = {978-1-941691-32-8},
  langid = {english},
  pagetotal = {234}
}

@book{meeks2015,
  title = {D3.Js in Action},
  author = {Meeks, Elijah},
  date = {2015},
  publisher = {Manning Publications}
}

@book{mena2021,
  title = {Book of {{Monads}}},
  author = {Mena, Alejandro Serrano},
  date = {2021-09-25T13:00:19},
  publisher = {Leanpub},
  url = {https://leanpub.next/book-of-monads},
  urldate = {2024-11-27},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/IYP7SVF3/book-of-monads.html}
}

@book{menaPracticalHaskellRealWorld2022,
  title = {Practical {{Haskell}}: {{A Real-World Guide}} to {{Functional Programming}}},
  shorttitle = {Practical {{Haskell}}},
  author = {Mena, Alejandro Serrano},
  date = {2022-09-25},
  edition = {3rd ed. edition},
  publisher = {Apress},
  location = {Berkeley, CA},
  abstract = {Get a practical, hands-on introduction to the Haskell language, its libraries and environment, and to the functional programming paradigm that is fast growing in importance in the software industry. This updated edition includes more modern treatment of Haskell's web framework and APIs.This book contains excellent coverage of the Haskell ecosystem and supporting tools, including Cabal and Stack for managing projects, HUnit and QuickCheck for software testing, WAI and Elm to develop the back end and front end of web applications, Persistent and Esqueleto for database access, and parallel and distributed programming libraries.You’ll see how functional programming is gathering momentum, allowing you to express yourself in a more concise way, reducing boilerplate, and increasing the safety of your code. Haskell is an elegant and noise-free pure functional language with a long history, having a huge number of library contributors and an active community. This makes Haskell the best tool for both learning and applying functional programming, and Practical Haskell, Third Edition takes advantage of this to show off the language and what it can do. Free source code available on the Apress GitHub page for this book.What You Will LearnGet started programming with HaskellExamine the different parts of the languageGain an overview of the most important libraries and tools in the Haskell ecosystemApply functional patterns in real-world scenariosUnderstand monads and monad transformersProficiently use laziness and resource managementWho This Book Is ForExperienced programmers who may be new to the Haskell programming language. However, some prior exposure to Haskell is recommended.},
  isbn = {978-1-4842-8580-0},
  langid = {english},
  pagetotal = {620}
}

@book{milewski2019,
  title = {Category {{Theory}} for {{Programmers}}},
  author = {Milewski, Bartosz},
  date = {2019-01-01},
  publisher = {Bartosz Milewski},
  location = {Milton Keynes},
  isbn = {978-0-464-24387-8},
  langid = {english}
}

@book{milewski2023,
  title = {Dao of Functional Programming},
  author = {Milewski, Bartosz},
  date = {2023}
}

@book{mimram2020,
  title = {Program = Proof},
  author = {Mimram, Samuel},
  date = {2020},
  publisher = {Independently published},
  url = {https://www.amazon.com/dp/B08C97TD9G/},
  isbn = {979-8-6155-9183-9},
  keywords = {book,rewriting}
}

@online{MITOCW,
  title = {Fundamentals of Program Analysis},
  author = {Solar-Lezama, Prof. Armando},
  date = {2015},
  url = {https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/}
}

@article{monadsraja2023,
  title = {Monads},
  author = {Raja, Idris},
  date = {2023}
}

@article{montrym2000,
  title = {{{NVIDIA Tesla}}: {{A Unified Graphics}} and {{Computing Architecture}}},
  shorttitle = {{{NVIDIA Tesla}}},
  author = {Montrym, John},
  date = {2000-01-01},
  journaltitle = {IEEE Micro},
  url = {https://www.academia.edu/28633432/NVIDIA_Tesla_A_Unified_Graphics_and_Computing_Architecture},
  urldate = {2024-07-27},
  abstract = {NVIDIA Tesla: A Unified Graphics and Computing Architecture},
  file = {/home/hippoid/fun/zotero/storage/KAS8AMLE/NVIDIA_Tesla_A_Unified_Graphics_and_Computing_Architecture.html}
}

@article{muller2006,
  title = {Monad Transformers Step by Step},
  author = {Grabmüller, M.},
  date = {2006},
  journaltitle = {who knows},
  url = {https://github.com/mgrabmueller/transformersstepbystep}
}

@book{norman2013,
  title = {The {{Design Of Everyday Things}}},
  author = {Norman, Don},
  date = {2013-11-05},
  edition = {Revised edition},
  publisher = {Basic Books},
  location = {New York, New York},
  abstract = {One of the world's great designers shares his vision of "the fundamental principles of great and meaningful design", that's "even more relevant today than it was when first published" (Tim Brown, CEO, IDEO). ~ Even the smartest among us can feel inept as we fail to figure out which light switch or oven burner to turn on, or whether to push, pull, or slide a door. ~ The fault, argues this ingenious -- even liberating -- book, lies not in ourselves, but in product design that ignores the needs of users and the principles of cognitive psychology. The problems range from ambiguous and hidden controls to arbitrary relationships between controls and functions, coupled with a lack of feedback or other assistance and unreasonable demands on memorization. ~The Design of Everyday Things shows that good, usable design is possible. The rules are simple: make things visible, exploit natural relationships that couple function and control, and make intelligent use of constraints. The goal: guide the user effortlessly to the right action on the right control at the right time. ~The Design of Everyday Things is a powerful primer on how -- and why -- some products satisfy customers while others only frustrate them.},
  isbn = {978-0-465-05065-9},
  langid = {english},
  pagetotal = {368}
}

@book{norvig2020,
  title = {Artificial {{Intelligence}}: {{A Modern Approach}}},
  author = {Norvig, Peter and Stuart, Russell},
  date = {2020},
  isbn = {978-0-13-461099-3},
  file = {/home/hippoid/fun/zotero/storage/TD2XGWC8/ref=sr_1_2.html}
}

@book{oram2007,
  title = {Beautiful {{Code}}: {{Leading Programmers Explain How They Think}}},
  shorttitle = {Beautiful {{Code}}},
  editor = {Oram, Andy and Wilson, Greg},
  date = {2007-07-31},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Beijing ; Sebastapol, Calif},
  abstract = {How do the experts solve difficult problems in software development? In this unique and insightful book, leading computer scientists offer case studies that reveal how they found unusual, carefully designed solutions to high-profile projects. You will be able to look over the shoulder of major coding and design experts to see problems through their eyes.  This is not simply another design patterns book, or another software engineering treatise on the right and wrong way to do things. The authors think aloud as they work through their project's architecture, the tradeoffs made in its construction, and when it was important to break rules.  This book contains 33 chapters contributed by Brian Kernighan, Karl Fogel, Jon Bentley, Tim Bray, Elliotte Rusty Harold, Michael Feathers, Alberto Savoia, Charles Petzold, Douglas Crockford, Henry S. Warren, Jr., Ashish Gulhati, Lincoln Stein, Jim Kent, Jack Dongarra and Piotr Luszczek, Adam Kolawa, Greg Kroah-Hartman, Diomidis Spinellis, Andrew Kuchling, Travis E. Oliphant, Ronald Mak, Rogerio Atem de Carvalho and Rafael Monnerat, Bryan Cantrill, Jeff Dean and Sanjay Ghemawat, Simon Peyton Jones, Kent Dybvig, William Otte and Douglas C. Schmidt, Andrew Patzer, Andreas Zeller, Yukihiro Matsumoto, Arun Mehta, TV Raman, Laura Wingerd and Christopher Seiwald, and Brian Hayes.  Beautiful Code is an opportunity for master coders to tell their story. All author royalties will be donated to Amnesty International.},
  isbn = {978-0-596-51004-6},
  langid = {english},
  pagetotal = {618}
}

@book{osullivan2008,
  title = {Real World Haskell},
  author = {O'Sullivan, Bryan and Goerzen, John and Stewart, Don},
  date = {2008},
  publisher = {O'Reilly Media, Inc.},
  location = {Sebastopol, CA, USA},
  isbn = {978-0-596-51498-3}
}

@book{ousterhoutPhilosophySoftwareDesign2021,
  title = {A {{Philosophy}} of {{Software Design}}, 2nd {{Edition}}},
  author = {Ousterhout, John},
  date = {2021-07-26},
  publisher = {Yaknyam Press},
  location = {Palo Alto, CA},
  abstract = {This book addresses the topic of software design: how to decompose complex software systems into modules (such as classes and methods) that can be implemented relatively independently. The book first introduces the fundamental problem in software design, which is managing complexity. It then discusses philosophical issues about how to approach the software design process and it presents a collection of design principles to apply during software design. The book also introduces a set of red flags that identify design problems. You can apply the ideas in this book to minimize the complexity of large software systems, so that you can write software more quickly and cheaply.},
  isbn = {978-1-7321022-1-7},
  langid = {english},
  pagetotal = {196}
}

@online{pdfscripting-2018-what-is-a-pdf,
  title = {What Is a {{PDF}}?},
  author = {{PDFScripting}},
  date = {2018},
  url = {https://www.youtube.com/watch?v=GqEH8XvPZwM}
}

@book{penner2019,
  title = {Optics {{By Example}}},
  author = {Penner, Chris},
  date = {2019-07-06T20:46:36},
  publisher = {Leanpub},
  url = {https://leanpub.next/optics-by-example},
  urldate = {2024-08-02},
  abstract = {The lenses and optics book for Haskell and other functional programming languages Be a data-manipulation wizard with Lenses, Prisms, Traversals and more!},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/ZHIWIRVY/optics-by-example.html}
}

@inproceedings{peytonjones1996,
  title = {Concurrent {{Haskell}}},
  booktitle = {Proceedings of the 23rd {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages  - {{POPL}} '96},
  author = {Peyton Jones, Simon and Gordon, Andrew and Finne, Sigbjorn},
  date = {1996},
  pages = {295--308},
  publisher = {ACM Press},
  location = {St. Petersburg Beach, Florida, United States},
  doi = {10.1145/237721.237794},
  url = {http://portal.acm.org/citation.cfm?doid=237721.237794},
  urldate = {2024-11-11},
  abstract = {Some applications are most easily expressed in a programming language that supports concurrency, notably interactive and distributed systems. We propose extensions to the purely-functional language Haskell that allow it to express explicitly concurrent applications; we call the resulting language Concurrent Haskell.},
  eventtitle = {The 23rd {{ACM SIGPLAN-SIGACT}} Symposium},
  isbn = {978-0-89791-769-8},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/CAJ2DYVR/Peyton Jones et al. - 1996 - Concurrent Haskell.pdf}
}

@book{pierce1991,
  title = {Basic {{Category Theory}} for {{Computer Scientists}}},
  author = {Pierce, Benjamin C.},
  date = {1991-08-07},
  publisher = {The MIT Press},
  location = {Cambridge, Mass},
  abstract = {Basic Category Theory for Computer Scientists provides a straightforward presentation of the basic constructions and terminology of category theory, including limits, functors, natural transformations, adjoints, and cartesian closed categories.Category theory is a branch of pure mathematics that is becoming an increasingly important tool in theoretical computer science, especially in programming language semantics, domain theory, and concurrency, where it is already a standard language of discourse. Assuming a minimum of mathematical preparation, Basic Category Theory for Computer Scientists provides a straightforward presentation of the basic constructions and terminology of category theory, including limits, functors, natural transformations, adjoints, and cartesian closed categories. Four case studies illustrate applications of category theory to programming language design, semantics, and the solution of recursive domain equations. A brief literature survey offers suggestions for further study in more advanced texts. ContentsTutorial • Applications • Further Reading},
  isbn = {978-0-262-66071-6},
  langid = {english},
  pagetotal = {114}
}

@book{pierce2002,
  title = {Types and {{Programming Languages}}},
  author = {Pierce, Benjamin C.},
  date = {2002-02-01},
  edition = {1st edition},
  publisher = {MIT Press},
  location = {Cambridge, Massachusetts London, England},
  abstract = {A comprehensive introduction to type systems and programming languages.A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systemsand of programming languages from a type-theoretic perspectivehas important applications in software engineering, language design, high-performance compilers, and security.This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.},
  isbn = {978-0-262-16209-8},
  langid = {english},
  pagetotal = {648}
}

@book{plfa22.08,
  title = {Programming Language Foundations in {{Agda}}},
  author = {Wadler, Philip and Kokke, Wen and Siek, Jeremy G.},
  date = {2022-08},
  url = {https://plfa.inf.ed.ac.uk/22.08/}
}

@book{polya2014,
  title = {How to {{Solve It}}: {{A New Aspect}} of {{Mathematical Method}}},
  shorttitle = {How to {{Solve It}}},
  author = {Polya, G. and Conway, John H.},
  date = {2014-10-27},
  edition = {Reprint edition},
  publisher = {Princeton University Press},
  location = {Princeton Oxford},
  abstract = {The bestselling book that has helped millions of readers solve any problemA must-have guide by eminent mathematician G. Polya, How to Solve It shows anyone in any field how to think straight. In lucid and appealing prose, Polya reveals how the mathematical method of demonstrating a proof or finding an unknown can help you attack any problem that can be reasoned out—from building a bridge to winning a game of anagrams. How to Solve It includes a heuristic dictionary with dozens of entries on how to make problems more manageable—from analogy and induction to the heuristic method of starting with a goal and working backward to something you already know.This disarmingly elementary book explains how to harness curiosity in the classroom, bring the inventive faculties of students into play, and experience the triumph of discovery. But it’s not just for the classroom. Generations of readers from all walks of life have relished Polya’s brilliantly deft instructions on stripping away irrelevancies and going straight to the heart of a problem.},
  isbn = {978-0-691-16407-6},
  langid = {english},
  pagetotal = {288}
}

@book{pomiane1994,
  title = {French {{Cooking}} in {{Ten Minutes}}: {{Adapting}} to the {{Rhythm}} of {{Modern Life}}},
  shorttitle = {French {{Cooking}} in {{Ten Minutes}}},
  author = {family=Pomiane, given=Edouard, prefix=de, useprefix=false},
  translator = {Hyman, Philip and Hyman, Mary},
  date = {1994-10-31},
  edition = {Illustrated edition},
  publisher = {North Point Press},
  location = {New York},
  abstract = {A beautiful reprint of Edouard de Pomiane's classic collection of recipes for simply prepared meals is more useful now than ever before. Illustrated with period pen and ink drawings, French Cooking in Ten Minutes offers an array of recipes for quick soups, extemporaneous sauces, egg and noodle dishes, preparing fish and meats, as well as vegetables, salads, and deserts.},
  isbn = {978-0-86547-480-2},
  langid = {english},
  pagetotal = {176}
}

@book{prince2023,
  title = {Understanding {{Deep Learning}}},
  author = {Prince, Simon J. D.},
  date = {2023-12-05},
  publisher = {The MIT Press},
  location = {Cambridge, Massachusetts London, England},
  abstract = {An authoritative, accessible, and up-to-date treatment of deep learning that strikes a pragmatic middle ground between theory and practice.Deep learning is a fast-moving field with sweeping relevance in today’s increasingly digital world. Understanding Deep Learning provides an authoritative, accessible, and up-to-date treatment of the subject, covering all the key topics along with recent advances and cutting-edge concepts. Many deep learning texts are crowded with technical details that obscure fundamentals, but Simon Prince ruthlessly curates only the most important ideas to provide a high density of critical information in an intuitive and digestible form. From machine learning basics to advanced models, each concept is presented in lay terms and then detailed precisely in mathematical form and illustrated visually. The result is a lucid, self-contained textbook suitable for anyone with a basic background in applied mathematics.Up-to-date treatment of deep learning covers cutting-edge topics not found in existing texts, such as transformers and diffusion modelsShort, focused chapters progress in complexity, easing students into difficult concepts Pragmatic approach straddling theory and practice gives readers the level of detail required to implement naive versions of modelsStreamlined presentation separates critical ideas from background context and extraneous detailMinimal mathematical prerequisites, extensive illustrations, and practice problems make challenging material widely accessible Programming exercises offered in accompanying Python Notebooks},
  isbn = {978-0-262-04864-4},
  langid = {english},
  pagetotal = {544}
}

@book{pumperla2019,
  title = {Deep {{Learning}} and the {{Game}} of {{Go}}},
  author = {Pumperla, Max and Ferguson, Kevin},
  date = {2019-01-25},
  edition = {First Edition},
  publisher = {Manning},
  location = {Shelter Island},
  abstract = {SummaryDeep Learning and the Game of Go teaches you how to apply the power of deep learning to complex reasoning tasks by building a Go-playing AI. After exposing you to the foundations of machine and deep learning, you'll use Python to build a bot and then teach it the rules of the game.Foreword by Thore Graepel, DeepMindPurchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.About the TechnologyThe ancient strategy game of Go is an incredible case study for AI. In 2016, a deep learning-based system shocked the Go world by defeating a world champion. Shortly after that, the upgraded AlphaGo Zero crushed the original bot by using deep reinforcement learning to master the game. Now, you can learn those same deep learning techniques by building your own Go bot!About the BookDeep Learning and the Game of Go introduces deep learning by teaching you to build a Go-winning bot. As you progress, you'll apply increasingly complex training techniques and strategies using the Python deep learning library Keras. You'll enjoy watching your bot master the game of Go, and along the way, you'll discover how to apply your new deep learning skills to a wide range of other scenarios!What's insideBuild and teach a self-improving game AIEnhance classical game AI systems with deep learningImplement neural networks for deep learningAbout the ReaderAll you need are basic Python skills and high school-level math. No deep learning experience required.About the AuthorMax Pumperla and Kevin Ferguson are experienced deep learning specialists skilled in distributed systems and data science. Together, Max and Kevin built the open source bot BetaGo.Table of ContentsPART 1 - FOUNDATIONSToward deep learning: a machine-learning introductionGo as a machine-learning problemImplementing your first Go botPART 2 - MACHINE LEARNING AND GAME AIPlaying games with tree searchGetting started with neural networksDesigning a neural network for Go dataLearning from data: a deep-learning botDeploying bots in the wildLearning by practice: reinforcement learningReinforcement learning with policy gradientsReinforcement learning with value methodsReinforcement learning with actor-critic methodsPART 3 - GREATER THAN THE SUM OF ITS PARTSAlphaGo: Bringing it all togetherAlphaGo Zero: Integrating tree search with reinforcement learning},
  isbn = {978-1-61729-532-4},
  langid = {english},
  pagetotal = {384}
}

@book{putradyPracticalWebDevelopment2018,
  title = {Practical {{Web Development}} with {{Haskell}}: {{Master}} the {{Essential Skills}} to {{Build Fast}} and {{Scalable Web Applications}}},
  shorttitle = {Practical {{Web Development}} with {{Haskell}}},
  author = {Putrady, Ecky},
  date = {2018-11-12},
  edition = {1st ed. edition},
  publisher = {Apress},
  abstract = {Learn how to advance your skill level of Haskell, and use this language for practical web development. This book uses a direct, no nonsense approach, so you no longer need to spend extra time reading the documentation, blog posts, and forums to understand how to use Haskell – all that knowledge is provided in one coherent resource.~You'll start by reviewing how multiple facets of web development are done in Haskell, such as routing, building HTMLs, interacting with databases, caches, and queues, etc. You'll then move on to using notable libraries, such as "scotty" for routings, "digestive-functor" for input validation, and "postgresql-simple" for interacting with databases.~In the later chapters, you'll learn how all of these libraries can be used together by working on a fully functioning project deployed on Heroku.~What You'll Learn~Set up a productive Haskell development environmentReview basic~tasks that are encountered when building web applications.Explore how to interact with external systems, such as~databases, queues, and RESTful APIs.~Build a RESTful API, website, building views and form validation.Who This Book Is ForSoftware developers familiar Haskell and would like to apply the knowledge on real world applications and software developers new to Haskell.},
  langid = {english},
  pagetotal = {302}
}

@book{ranta2012,
  title = {Implementing {{Programming Languages}}. an {{Introduction}} to {{Compilers}} and {{Interpreters}}},
  author = {Ranta, Aarne},
  date = {2012-05-09},
  edition = {Paperback edition},
  publisher = {College Publications},
  location = {London},
  abstract = {Implementing a programming language means bridging the gap from the programmer's high-level thinking to the machine's zeros and ones. If this is done in an efficient and reliable way, programmers can concentrate on the actual problems they have to solve, rather than on the details of machines. But understanding the whole chain from languages to machines is still an essential part of the training of any serious programmer. It will result in a more competent programmer, who will moreover be able to develop new languages. A new language is often the best way to solve a problem, and less difficult than it may sound. This book follows a theory-based practical approach, where theoretical models serve as blueprint for actual coding. The reader is guided to build compilers and interpreters in a well-understood and scalable way. The solutions are moreover portable to different implementation languages. Much of the actual code is automatically generated from a grammar of the language, by using the BNF Converter tool. The rest can be written in Haskell or Java, for which the book gives detailed guidance, but with some adaptation also in C, C++, C\#, or OCaml, which are supported by the BNF Converter. The main focus of the book is on standard imperative and functional languages: a subset of C++ and a subset of Haskell are the source languages, and Java Virtual Machine is the main target. Simple Intel x86 native code compilation is shown to complete the chain from language to machine. The last chapter leaves the standard paths and explores the space of language design ranging from minimal Turing-complete languages to human-computer interaction in natural language.},
  isbn = {978-1-84890-064-6},
  langid = {english},
  pagetotal = {224}
}

@article{renesse2011,
  title = {Mathematics and Salsa Dancing},
  author = {family=Renesse, given=Christine, prefix=von, useprefix=true and Ecke, Volker},
  date = {2011-03},
  journaltitle = {Journal of Mathematics and the Arts},
  volume = {5},
  pages = {17--28}
}

@misc{rfc1035,
  title = {Domain Names - Implementation and Specification},
  date = {1987-11},
  series = {Request for Comments},
  number = {1035},
  doi = {10.17487/RFC1035},
  url = {https://www.rfc-editor.org/info/rfc1035},
  abstract = {This RFC is the revised specification of the protocol and format used in the implementation of the Domain Name System. It obsoletes RFC-883. This memo documents the details of the domain name client - server communication.},
  howpublished = {RFC 1035},
  organization = {RFC Editor},
  pagetotal = {55}
}

@misc{rfc791,
  title = {Internet Protocol},
  date = {1981-09},
  series = {Request for Comments},
  number = {791},
  doi = {10.17487/RFC0791},
  url = {https://www.rfc-editor.org/info/rfc791},
  howpublished = {RFC 791},
  organization = {RFC Editor},
  pagetotal = {51}
}

@book{rlhf2024,
  title = {Reinforcement Learning from Human Feedback},
  author = {Lambert, Nathan},
  date = {2024},
  publisher = {Online},
  url = {https://rlhfbook.com}
}

@misc{romashkina2021,
  title = {Lift Unliftable (and Unlift Liftable) Zurihac21},
  author = {Romashkina, Veronika},
  date = {2021},
  url = {https://www.youtube.com/watch?v=wJsXjsCvSPg}
}

@misc{rosenthol-2016-intro-to-pdf,
  title = {Intro to {{PDF}}},
  author = {Rosenthol, Leondard},
  date = {2016},
  url = {https://www.youtube.com/watch?v=KmP7pbcAl-8}
}

@book{rosenthol2013developing,
  title = {Developing {{PDF}}},
  author = {Rosenthol, Leondard},
  date = {2013},
  publisher = {O'Reilly Media}
}

@book{rudin1976,
  title = {Principles of {{Mathematical Analysis}}},
  author = {Rudin, Walter},
  date = {1976-01-01},
  edition = {3rd},
  publisher = {McGraw-Hill Publishing Company},
  location = {Auckland},
  abstract = {Third edition paperback in very good condition. Covers are scored, cover edges and corners are slightly bumped and rubbed, and front cover, upper leading edge corner is dog-eared. Page block is lightly blemished. Binding is sound and pages are clear. LW},
  isbn = {978-0-07-085613-4},
  langid = {english},
  pagetotal = {342}
}

@book{sadun2023,
  title = {Numerical {{Brain Teasers}}: {{Exercise Your Mind}}},
  shorttitle = {Numerical {{Brain Teasers}}},
  author = {Sadun, Erica},
  date = {2023-01-24},
  edition = {1st edition},
  publisher = {Pragmatic Bookshelf},
  abstract = {Challenge your brain with math! Using nothing more than basic arithmetic and logic, you'll be thrilled as answers slot into place. Whether purely for fun or to test your knowledge, you'll sharpen your problem-solving skills and flex your mental muscles. All you need is logical thought, a little patience, and a clear mind. There are no gotchas here. These puzzles are the perfect introduction to or refresher for math concepts you may have only just learned or long since forgotten. Get ready to have more fun with numbers than you've ever had before.Engage your analytical side with these numerical brain teasers. Math and logic puzzles help you stretch your mind to think in new ways. They flex your lateral thinking as you work through fresh problem styles. Each puzzle type comes with an explanation, a method for solving them, and solutions if you get stuck.The puzzles in this book are short, self-contained, and "gritty." They offer an enjoyable challenge and are designed to be solvable within a few minutes. You only need basic arithmetic to solve these puzzles; no advanced math required. There's plenty of variety to keep things fresh. From wandering digits to magic triangles, from summing grids to water pails, you'll find something that catches your interest. Each puzzle is brief, so use them as a warm-up to your daily work, for a delightful diversion on your coffee break, or solve a few while you wind down for the day.Grab a pencil and your thinking cap, and get solving!},
  isbn = {978-1-68050-974-8},
  langid = {english},
  pagetotal = {188}
}

@article{searle,
  title = {; {{Minds}}, Brains, and Programs},
  author = {Searle, John R},
  abstract = {This article can be viewed as an attempt to explore the consequences of two propositions. (1) Intentionality in human beings (and animals) is a product of causal features of the brain. I assume this is an empirical fact about the actual causal relations between mental processes and brains. It says simply that certain brain processes are sufficient for intentionality. (2) Instantiating a computer program is never by itself a sufficient condition of intentionality. The main argument of this paper is directed at establishing this claim. The form of -the argument is to show how a human agent could instantiate the program and still not have the relevant intentionality. These two propositions have the following consequences: (3) The explanation of how the brain produces intentionality cannot be that it does it by instantiating a computer program, This is a strict logical consequence of 1 and 2. (4) Any mechanism capable of producing intentionality must have causal powers equal to those of the brain. This is meant to be a trivial consequence of 1. (5) Any attempt literally to create intentionality artificially (strong AI) could not succeed just by designing programs but would have to duplicate the causal powers of the human brain. This follows from 2 and 4.},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/8YCVPYJM/Searle - ; Minds, brains, and programs.pdf}
}

@article{searle1980,
  title = {Minds, {{Brains}}, and {{Programs}}},
  author = {Searle, John},
  date = {1980},
  journaltitle = {Behavioral and Brain Sciences},
  volume = {3},
  number = {3},
  pages = {417--57},
  doi = {10.1017/s0140525x00005756},
  file = {/home/hippoid/fun/zotero/storage/LQ32IIYX/SEAMBA.html}
}

@thesis{shannon1940,
  type = {Thesis},
  title = {A Symbolic Analysis of Relay and Switching Circuits},
  author = {Shannon, Claude Elwood},
  date = {1940},
  institution = {Massachusetts Institute of Technology},
  url = {https://dspace.mit.edu/handle/1721.1/11173},
  urldate = {2024-06-09},
  abstract = {Thesis (M.S.)--Massachusetts Institute of Technology, Dept. of Electrical Engineering, 1940.},
  langid = {english},
  annotation = {Accepted: 2008-05-19T16:55:43Z},
  file = {/home/hippoid/fun/zotero/storage/JJISWMQ8/Shannon - 1940 - A symbolic analysis of relay and switching circuit.pdf}
}

@book{sipser2012,
  title = {Introduction to the {{Theory}} of {{Computation}}},
  author = {Sipser, Michael},
  date = {2012},
  url = {https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X/},
  urldate = {2024-08-10},
  isbn = {978-1-133-18779-0}
}

@book{sitnikovski2023,
  title = {Introduction to {{Dependent Types}} with {{Idris}}: {{Encoding Program Proofs}} in {{Types}}},
  shorttitle = {Introduction to {{Dependent Types}} with {{Idris}}},
  author = {Sitnikovski, Boro},
  date = {2023-03-18},
  edition = {1st ed. edition},
  publisher = {Apress},
  abstract = {Dependent types are a concept that allows developers to write proof-carrying code. Idris is a programming language that supports dependent types. This book will teach you the mathematical foundations of Idris as well as how to use it to write software and mathematically prove properties.The first part of the book serves as an introduction to the language's underlying theories. It starts by reviewing formal systems and mathematical logical systems as foundational building blocks, then gradually builds up to dependent types. Next, you'll learn type theory for dependent types. Following this, you'll explore the Idris programming language and conclude by exploring the depths of formal systems and type checkers by implementing them.Introduction to Dependent Types with Idris will walk you through simple examples through more advanced techniques, stepping up the difficulty as you gain more knowledge. Every chapter includes a set of exercises based on what it covered to further cement your learning. No specialized knowledge of mathematics is expected beyond the basics, so it is perfect for novices.What You Will LearnUnderstand Lambda calculus and dependent types Gain insight into functional programmingWrite mathematical proofs with IdrisWho This Book Is ForProgrammers, mathematicians, academics, and anyone else interested learning dependent types and lambda calculus.},
  isbn = {978-1-4842-9258-7},
  langid = {english},
  pagetotal = {176}
}

@book{skinner2023,
  title = {Effective Haskell},
  author = {Skinner, Rebecca},
  date = {2023},
  publisher = {Pragmatic Programmers}
}

@book{smullyan2000,
  title = {To {{Mock}} a {{Mockingbird}}},
  author = {Smullyan, Raymond},
  date = {2000-11-30},
  publisher = {Oxford University Press},
  location = {Oxford},
  abstract = {In this entertaining and challenging collection of logic puzzles, Raymond Smullyan - author of Forever Undecided - continues to delight and astonish us with his gift for making available, in the thoroughly pleasurable form of puzzles, some of the most important mathematical thinking of our time. In the first part of the book, he transports us once again to that wonderful realm where knights, knaves, twin sisters, quadruplet brothers, gods, demons, and mortals either always tell the truth or always lie, and where truth-seekers are set a variety of fascinating problems. The section culminates in an enchanting and profound metapuzzle in which Inspector Craig of Scotland Yard gets involved in a search for the Fountain of Youth on the Island of Knights and Knaves. In the second part of To Mock a Mockingbird, we accompany the Inspector on a summer-long adventure into the field of combinatory logic (a branch of logic that plays an important role in computer science and artificial intelligence). His adventure, which includes enchanted forests, talking birds, bird sociologists, and a classic quest, provides for us along the way the pleasure of solving puzzles of increasing complexity until we reach the Master Forest and - thanks to Godel's famous theorem - the final revelation.},
  isbn = {978-0-19-280142-5},
  langid = {english},
  pagetotal = {256}
}

@book{snoymanDevelopingWebApps2015,
  title = {Developing {{Web Apps}} with {{Haskell}} and {{Yesod}}: {{Safety-Driven Web Development}}},
  shorttitle = {Developing {{Web Apps}} with {{Haskell}} and {{Yesod}}},
  author = {Snoyman, Michael},
  date = {2015-02-17},
  edition = {2nd edition},
  publisher = {O'Reilly Media},
  abstract = {This fast-moving guide introduces web application development with Haskell and Yesod, a potent language/framework combination that supports high-performing applications that are modular, type-safe, and concise. Fully updated for Yesod 1.4, this second edition shows you how Yesod handles widgets, forms, persistence, and RESTful content. Author Michael Snoyman also introduces various Haskell tools to supplement your basic knowledge of the language.By the time you finish this book, you’ll create a production-quality web application with Yesod’s ready-to-use scaffolding. You’ll also examine several real-world examples, including a blog, a wiki, a JSON web service, and a Sphinx search server.Build a simple application to learn Yesod’s foundation datatype and Web Application Interface (WAI)Output HTML, CSS, and Javascript with Shakespearean template languagesGet an indepth look at Yesod’s core monads for producing cleaner, more modular codeProbe Yesod’s internal workings: learn the request handling process for a typical applicationBuild forms on top of widgets by implementing the yesod-form declarative APILearn how Yesod and Haskell handle persistence and session dataServe an HTML page and a machine-friendly JSON page from the same URL},
  langid = {english},
  pagetotal = {623}
}

@book{solowHowReadProofs2013,
  title = {How to {{Read}} and {{Do Proofs}}: {{An Introduction}} to {{Mathematical Thought Processes}}},
  shorttitle = {How to {{Read}} and {{Do Proofs}}},
  author = {Solow, Daniel},
  date = {2013-07-29},
  edition = {6th edition},
  publisher = {Wiley},
  location = {Hoboken, NJ},
  abstract = {This text makes a great supplement and provides a systematic approach for teaching undergraduate and graduate students how to read, understand, think about, and do proofs. The approach is to categorize, identify, and explain (at the student's level) the various techniques that are used repeatedly in all proofs, regardless of the subject in which the proofs arise. How to Read and Do Proofs~also explains when each technique is likely to be used, based on certain key words that appear in the problem under consideration. Doing so enables students to choose a technique consciously, based on the form of the problem.},
  isbn = {978-1-118-16402-0},
  langid = {english},
  pagetotal = {336}
}

@online{southwell2021,
  title = {Modern Foundations of Mathematics},
  author = {Southwell, Richard},
  date = {2021},
  url = {https://www.youtube.com/playlist?list=PLCTMeyjMKRkqTM2-9HXH81tvpdROs-nz3}
}

@book{spivak2014category,
  title = {Category Theory for the Sciences},
  author = {Spivak, David I},
  date = {2014},
  publisher = {MIT Press},
  url = {https://www.amazon.com/Category-Theory-Sciences-MIT-Press/dp/0262028131},
  isbn = {978-0262028131}
}

@book{spivakCalculus2006,
  title = {Calculus},
  author = {Spivak, Michael},
  date = {2006-06-01},
  edition = {3rd edition},
  publisher = {Cambridge University Press},
  location = {Cambridge},
  abstract = {Spivak's celebrated textbook is widely held as one of the finest introductions to mathematical analysis. His aim is to present calculus as the first real encounter with mathematics: it is the place to learn how logical reasoning combined with fundamental concepts can be developed into a rigorous mathematical theory rather than a bunch of tools and techniques learned by rote. Since analysis is a subject students traditionally find difficult to grasp, Spivak provides leisurely explanations, a profusion of examples, a wide range of exercises and plenty of illustrations in an easy-going approach that enlightens difficult concepts and rewards effort. Calculus will continue to be regarded as a modern classic, ideal for honours students and mathematics majors, who seek an alternative to doorstop textbooks on calculus, and the more formidable introductions to real analysis.},
  isbn = {978-0-521-86744-3},
  langid = {english},
  pagetotal = {681}
}

@book{stanley2015,
  title = {Catalan {{Numbers}}},
  author = {Stanley, Richard P.},
  date = {2015-03-26},
  edition = {1st edition},
  publisher = {Cambridge University Press},
  location = {New York, NY},
  abstract = {Catalan numbers are probably the most ubiquitous sequence of numbers in mathematics. This book provides, for the first time, a comprehensive collection of their properties and applications in combinatorics, algebra, analysis, number theory, probability theory, geometry, topology, and other areas. After an introduction to the basic properties of Catalan numbers, the book presents 214 different kinds of objects which are counted using Catalan numbers, including of exercises with solutions. The reader can try solving the exercises or simply browse through them. 68 additional exercises with prescribed difficulty levels present various properties of Catalan numbers and related numbers, such as Fuss-Catalan numbers, Motzkin numbers, Schröder numbers, Narayana numbers, super Catalan numbers, q-Catalan numbers and (q,t)-Catalan numbers. The book concludes with a history of Catalan numbers by Igor Pak and a glossary of key terms. Whether your interest in mathematics is recreation or research, you will find plenty of fascinating and stimulating facts here.},
  isbn = {978-1-107-42774-7},
  langid = {english},
  pagetotal = {224}
}

@book{steinberg2006,
  title = {Zero {{Configuration Networking}}: {{The Definitive Guide}}},
  shorttitle = {Zero {{Configuration Networking}}},
  author = {Steinberg, Daniel and Cheshire, Stuart},
  date = {2006-01-17},
  edition = {1st edition},
  publisher = {O'Reilly Media},
  location = {Beijing Köln},
  abstract = {It used to be that two laptops, sitting side by side, couldn't communicate with each other; they may as well have been a thousand miles apart. But that was then, before the advent of Zero Configuration Networking technology. This amazing cross-platform open source technology automatically connects electronic devices on a network, allowing them to interoperate seamlessly-without any user configuration. So now you don't have to lift a finger! Needless to say, it has completely changed the way people connect to devices and programs for printing, file sharing, and other activities. Zero Configuration Networking: The Definitive Guide walks you through this groundbreaking network technology, with a complete description of the protocols and ways to implement network-aware applications and devices.  Written by two Zero Configuration Networking experts, including one of Apple's own computer scientists, the book covers more than just file sharing and printing. Zero Configuration Networking also enables activities such as music and photo sharing and automatic buddy discovery on Instant Messaging applications. In fact, Zero Configuration Networking can be used for virtually any device that can be controlled by a computer. And this handy guide has the inside scoop on all of its capabilities-and how you can easily apply them in your own environment.  For the technically advanced, Zero Configuration Networking: The Definitive Guide examines the three core technologies that make up Zero Configuration Networking: Link-Local Addressing, Multicast DNS, and DNS Service Discovery. It also reviews a series of APIs, including C-API, Java API, CFNetServices, and Cocoa's NSNetServices.  Whether you want to understand how iTunes works, or you want to network a series of laptops and other devices at your office for maximum efficiency, you'll find all the answers in this authoritative guide.},
  isbn = {978-0-596-10100-8},
  langid = {english},
  pagetotal = {252}
}

@book{stepanov2009,
  title = {Elements of {{Programming}}},
  author = {Stepanov, Alexander A. and McJones, Paul},
  date = {2009-06-09},
  edition = {1st edition},
  publisher = {Addison-Wesley Professional},
  abstract = {“Ask a mechanical, structural, or electrical engineer how far they would get without a heavy reliance on a firm mathematical foundation, and they will tell you, ‘not far.’ Yet so-called software engineers often practice their art with little or no idea of the mathematical underpinnings of what they are doing. And then we wonder why software is notorious for being delivered late and full of bugs, while other engineers routinely deliver finished bridges, automobiles, electrical appliances, etc., on time and with only minor defects. This book sets out to redress this imbalance. Members of my advanced development team at Adobe who took the course based on the same material all benefited greatly from the time invested. It may appear as a highly technical text intended only for computer scientists, but it should be required reading for all practicing software engineers.” ~~~ —Martin Newell, Adobe Fellow  ~“The book contains some of the most beautiful code I have ever seen.” ~~~ —Bjarne Stroustrup, Designer of C++  “I am happy to see the content of Alex’s course, the development and teaching of which I strongly supported as the CTO of Silicon Graphics, now available to all programmers in this elegant little book.” ~~~ —Forest Baskett, General Partner, New Enterprise Associates  “Paul’s patience and architectural experience helped to organize Alex’s~ mathematical approach into a tightly-structured edifice—an impressive feat!” ~~~ —Robert W. Taylor, Founder of Xerox PARC CSL and DEC Systems Research Center   Elements of Programmingprovides a different understanding of programming than is presented elsewhere. Its major premise is that practical programming, like other areas of science and engineering,must be based on a solid mathematical foundation. The book shows that algorithms implemented in a real programming language, such as C++, can operate in the most general mathematical setting. For example, the fast exponentiation~ algorithm is defined to work with any associative operation. Using abstract algorithms leads to efficient, reliable, secure, and economical software.  This is not an easy book. Nor is it a compilation of tips and tricks for incremental improvements in your programming skills. The book’s value is more fundamental and, ultimately, more critical for insight into programming. To benefit fully, you will need to work through it from beginning to end, reading the code, proving the lemmas, and doing the exercises. When finished, you will see how the application of the deductive method to your programs assures that your system’s software components will work together and behave as they must.  The book presents a number of algorithms and requirements for types on which they are defined. The code for these descriptions—also available on the Web—is written in a small subset of C++ meant to be accessible to any experienced programmer. This subset is defined in a special language appendix coauthored by Sean Parent and Bjarne Stroustrup.  Whether you are a software developer, or any other professional for whom programming is an important activity, or a committed student, you will come to understand what the book’s experienced authors have been teaching and demonstrating for years—that mathematics is good for programming, and that theory is good for practice.},
  langid = {english},
  pagetotal = {401}
}

@book{stepanov2014,
  title = {From {{Mathematics}} to {{Generic Programming}}},
  author = {Stepanov, Alexander and Rose, Daniel},
  date = {2014-11-07},
  edition = {1st edition},
  publisher = {Addison-Wesley Professional},
  location = {Upper Saddle River, NJ},
  abstract = {In this substantive yet accessible book, pioneering software designer Alexander Stepanov and his colleague Daniel Rose illuminate the principles of generic programming and the mathematical concept of abstraction on which it is based, helping you write code that is both simpler and more powerful.If you’re a reasonably proficient programmer who can think logically, you have all the background you’ll need. Stepanov and Rose introduce the relevant abstract algebra and number theory with exceptional clarity. They carefully explain the problems mathematicians first needed to solve, and then show how these mathematical solutions translate to generic programming and the creation of more effective and elegant code. To demonstrate the crucial role these mathematical principles play in many modern applications, the authors show how to use these results and generalized algorithms to implement a real-world public-key cryptosystem.As you read this book, you’ll master the thought processes necessary for effective programming and learn how to generalize narrowly conceived algorithms to widen their usefulness without losing efficiency. You’ll also gain deep insight into the value of mathematics to programming―insight that will prove invaluable no matter what programming languages and paradigms you use.You will learn about How to generalize a four thousand-year-old algorithm, demonstrating indispensable lessons about clarity and efficiency Ancient paradoxes, beautiful theorems, and the productive tension between continuous and discrete A simple algorithm for finding greatest common divisor (GCD) and modern abstractions that build on it Powerful mathematical approaches to abstraction How abstract algebra provides the idea at the heart of generic programming Axioms, proofs, theories, and models: using mathematical techniques to organize knowledge about your algorithms and data structures Surprising subtleties of simple programming tasks and what you can learn from them How practical implementations can exploit theoretical knowledge},
  isbn = {978-0-321-94204-3},
  langid = {english},
  pagetotal = {320}
}

@book{sterling1986,
  title = {The {{Art}} of {{Prolog}}: {{Advanced Programming Techniques}}},
  author = {Sterling, Leon and Ehud, Shapiro},
  date = {1986},
  abstract = {Mit Press Series in Logic Programming},
  isbn = {978-0-262-19250-7}
}

@book{stevanovic,
  title = {Behavioral {{Interviews}} for {{Software Engineers}}: {{All}} the {{Must-Know Questions With Proven Strategies}} and {{Answers That Will Get You}} the {{Job}}},
  shorttitle = {Behavioral {{Interviews}} for {{Software Engineers}}},
  author = {Stevanovic, Melia},
  abstract = {The Fastest Way To Increase Your Salary and Compensation Is Through Successful Behavioral InterviewsSucceeding in them can mean an instant 30\% increase in compensation, bypassing years of promotion hustle within the company.This comprehensive guide offers you a wealth of common behavioral questions, sample answers, and clear explanations, helping you unlock your interview success and secure a higher compensation package.What’s inside?Top 57 real behavioral interview questions asked by Meta, Google, Amazon, Netflix, Apple, LinkedInand more tech companies, saving you at least 10 hours researching.Questions cover the most frequently tested topics in behavioral interviews: Problem solving, leadership, time management, teamwork, communication, decision making, initiative, achievement, adaptability, learning and growth.Detailed explanation of the STARR method for effective interview response crafting.Concrete example answers following the STARR rule allowing you to customize samples to your project experience for maximum impact.Step-by-step proven strategies to tackle each question, so that you can confidently solve interview questions you haven’t seen.ADD TO CART and unlock the secrets to acing Behavioral Interviews!},
  langid = {english},
  pagetotal = {168}
}

@book{strangIntroductionLinearAlgebra2023,
  title = {Introduction to {{Linear Algebra}}},
  author = {Strang, Gilbert},
  date = {2023-01-26},
  edition = {6th edition},
  publisher = {Wellesley-Cambridge Press},
  location = {Wellesley, Mass},
  abstract = {Linear algebra now rivals or surpasses calculus in importance for people working in quantitative fields of all kinds: engineers, scientists, economists and business people. Gilbert Strang has taught linear algebra at MIT for more than 50 years and the course he developed has become a model for teaching around the world. His video lectures on MIT OpenCourseWare have been viewed over ten million times and his twelve textbooks are popular with readers worldwide. This sixth edition of Professor Strang's most popular book, Introduction to Linear Algebra, introduces the ideas of independent columns and the rank and column space of a matrix early on for a more active start. Then the book moves directly to the classical topics of linear equations, fundamental subspaces, least squares, eigenvalues and singular values – in each case expressing the key idea as a matrix factorization. The final chapters of this edition treat optimization and learning from data: the most active application of linear algebra today. Everything is explained thoroughly in Professor Strang's characteristic clear style. It is sure to delight and inspire the delight and inspire the next generation of learners.},
  isbn = {978-1-7331466-7-8},
  langid = {english},
  pagetotal = {440}
}

@book{tanenbaum2010,
  title = {Computer {{Networks}}},
  author = {Tanenbaum, Andrew and Wetherall, David},
  date = {2010-09-27},
  edition = {5th edition},
  publisher = {Pearson},
  location = {Boston Amsterdam},
  abstract = {Computer Networks, 5/e is appropriate for Computer Networking or Introduction to Networking courses at both the undergraduate and graduate level in Computer Science, Electrical Engineering, CIS, MIS, and Business Departments.Tanenbaum takes a structured approach to explaining how networks work from the inside out. He starts with an explanation of the physical layer of networking, computer hardware and transmission systems; then works his way up to network applications. Tanenbaum's in-depth application coverage includes email; the domain name system; the World Wide Web (both client- and server-side); and multimedia (including voice over IP, Internet radio video on demand, video conferencing, and streaming media. Each chapter follows a consistent approach: Tanenbaum presents key principles, then illustrates them utilizing real-world example networks that run through the entire book―the Internet, and wireless networks, including Wireless LANs, broadband wireless and Bluetooth. The Fifth Edition includes a chapter devoted exclusively to network security. The textbook is supplemented by a Solutions Manual, as well as a Website containing PowerPoint slides, art in various forms, and other tools for instruction, including a protocol simulator whereby students can develop and test their own network protocols.},
  isbn = {978-0-13-212695-3},
  langid = {english},
  pagetotal = {960}
}

@online{tango,
  title = {Beginners Guide to {{Argentine}} Tango},
  author = {family=tango, given=Taste, prefix=for, useprefix=false},
  url = {http://www.taste4tango.net/en/index.php},
  urldate = {2024-10-02},
  abstract = {Argentine tango dance steps},
  langid = {english},
  organization = {Taste4Tango},
  file = {/home/hippoid/fun/zotero/storage/IWIMB97F/tango-caminada.html}
}

@book{tate2022,
  title = {Programmer {{Passport}}: {{Prolog}}},
  author = {Tate, Bruce},
  date = {2022}
}

@book{tevault2020,
  title = {Mastering {{Linux Security}} and {{Hardening}}: {{A}} Practical Guide to Protecting Your {{Linux}} System from Cyber Attacks},
  author = {Tevault, Donald},
  date = {2020},
  edition = {2nd Edition},
  publisher = {Packt Publishing}
}

@book{thompson1991,
  title = {Type {{Theory}} and {{Functional Programming}}},
  author = {Thompson, Simon},
  date = {1991-01-01},
  publisher = {Addison-Wesley},
  location = {Wokingham, England ; Reading, Mass},
  abstract = {Constructive Type theory has been a topic of research interest to computer scientists, mathematicians, logicians and philosophers for a number of years. For computer scientists it provides a framework which brings together logic and programming languages in a most elegant and fertile program development and verification can proceed within a single system. Viewed in a different way, type theory is a functional programming language with some novel features, such as the totality of all its functions, its expressive type system allowing functions whose result type depends upon the value of its input, and sophisticated modules and abstract types whose interfaces can contain logical assertions as well as signature information. A third point of view emphasizes that programs (or functions) can be extracted from proofs in the logic.The book can be thought of as giving both a first and a second course in type theory. It begins with introductory material on logic and functional programming, and follow this by presenting the system of type theory itself, together with many examples. As well as this, this book goes further, looking at the system from a mathematical perspective, thus elucidating a number of its important properties. This book then takes a critical look at the profusion of suggestions in the literature about why and how type theory could be augmented. In doing this, this book is aiming at a moving target; it must be the case that further developments will have been made before the book reaches the press. Nonetheless, such an survey can give the reader a much more developed sense of the potential of type theory, as well as giving the background of what is to come.Book The first three chapters survey the three fields upon which type theory logic, the lambda-calculus and functional programming and constructive mathematics. The surveys are short, establishing terminology, notation and a general context for the discussion; pointers to the relevant literature and in particular to more detailed introductions are provided. In the second chapter this book discusses some issues in the lambda-calculus and functional programming which suggest analogous questions in type theory.The fourth chapter forms the focus of the book. This book gives the formal system for type theory, developing examples of both programs and proofs as we go along. These tend to be short, illustrating the construct just introduced - Chapter 6 contains many more examples.The system is expressive, as witnessed by the previous chapter, but are programs given in their most natural or efficient form? Chapter 7 provides a host of proposals of how to augment the system.Chapter eight examines the foundations of the how it compares with other systems for constructive mathematics, how models of it are formed and used and how certain of the rules, the closure rules, may be seen as being generated from the introduction rules, which state what are the canonical members of each type. The book ends with a survey of related systems, implemented or not, and some concluding remarks.},
  isbn = {978-0-201-41667-1},
  langid = {english},
  pagetotal = {388}
}

@misc{typeclassopedia,
  title = {Typeclassopedia},
  author = {{contributors}, HaskellWiki},
  year = {Last revised on 30 December 2022},
  url = {https://wiki.haskell.org/index.php?title=Typeclassopedia&oldid=65490},
  howpublished = {HaskellWiki}
}

@online{udandarao2024,
  title = {No "{{Zero-Shot}}" {{Without Exponential Data}}: {{Pretraining Concept Frequency Determines Multimodal Model Performance}}},
  shorttitle = {No "{{Zero-Shot}}" {{Without Exponential Data}}},
  author = {Udandarao, Vishaal and Prabhu, Ameya and Ghosh, Adhiraj and Sharma, Yash and Torr, Philip H. S. and Bibi, Adel and Albanie, Samuel and Bethge, Matthias},
  date = {2024-04-08},
  eprint = {2404.04125},
  eprinttype = {arXiv},
  eprintclass = {cs},
  doi = {10.48550/arXiv.2404.04125},
  url = {http://arxiv.org/abs/2404.04125},
  urldate = {2024-05-15},
  abstract = {Web-crawled pretraining datasets underlie the impressive "zero-shot" evaluation performance of multimodal models, such as CLIP for classification/retrieval and Stable-Diffusion for image generation. However, it is unclear how meaningful the notion of "zero-shot" generalization is for such multimodal models, as it is not known to what extent their pretraining datasets encompass the downstream concepts targeted for during "zero-shot" evaluation. In this work, we ask: How is the performance of multimodal models on downstream concepts influenced by the frequency of these concepts in their pretraining datasets? We comprehensively investigate this question across 34 models and five standard pretraining datasets (CC-3M, CC-12M, YFCC-15M, LAION-400M, LAION-Aesthetics), generating over 300GB of data artifacts. We consistently find that, far from exhibiting "zero-shot" generalization, multimodal models require exponentially more data to achieve linear improvements in downstream "zero-shot" performance, following a sample inefficient log-linear scaling trend. This trend persists even when controlling for sample-level similarity between pretraining and downstream datasets, and testing on purely synthetic data distributions. Furthermore, upon benchmarking models on long-tailed data sampled based on our analysis, we demonstrate that multimodal models across the board perform poorly. We contribute this long-tail test set as the "Let it Wag!" benchmark to further research in this direction. Taken together, our study reveals an exponential need for training data which implies that the key to "zero-shot" generalization capabilities under large-scale training paradigms remains to be found.},
  pubstate = {prepublished},
  keywords = {Computer Science - Computation and Language,Computer Science - Computer Vision and Pattern Recognition,Computer Science - Machine Learning},
  file = {/home/hippoid/fun/zotero/storage/QFQ7IGE2/Udandarao et al. - 2024 - No Zero-Shot Without Exponential Data Pretraini.pdf;/home/hippoid/fun/zotero/storage/L4XSDUW8/2404.html}
}

@article{volkov,
  title = {{{LU}}, {{QR}} and {{Cholesky Factorizations}} Using {{Vector Capabilities}} of {{GPUs}}},
  author = {Volkov, Vasily and Demmel, James W},
  abstract = {We present performance results for dense linear algebra using the 8-series NVIDIA GPUs. Our matrix-matrix multiply routine (GEMM) runs 60\% faster than the vendor implementation in CUBLAS 1.1 and approaches the peak of hardware capabilities. Our LU, QR and Cholesky factorizations achieve up to 80–90\% of the peak GEMM rate. Our parallel LU running on two GPUs achieves up to \textasciitilde 300 Gflop/s. These results are accomplished by challenging the accepted view of the GPU architecture and programming guidelines. We argue that modern GPUs should be viewed as multithreaded multicore vector units. We exploit blocking similarly to vector computers and heterogeneity of the system by computing both on GPU and CPU. This study includes detailed benchmarking of the GPU memory system that reveals sizes and latencies of caches and TLB. We present a couple of algorithmic optimizations aimed at increasing parallelism and regularity in the problem that provide us with slightly higher performance.},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/72WMI7GU/Volkov and Demmel - LU, QR and Cholesky Factorizations using Vector Ca.pdf}
}

@book{ward2021,
  title = {How {{Linux Works}}, 3rd {{Edition}}: {{What Every Superuser Should Know}}},
  shorttitle = {How {{Linux Works}}, 3rd {{Edition}}},
  author = {Ward, Brian},
  date = {2021-04-19},
  edition = {3rd edition},
  publisher = {No Starch Press},
  location = {San Francisco},
  abstract = {Best-selling guide to the inner workings of the Linux operating system with over 50,000 copies sold since its original release in 2014.Linux for the Superuser Unlike some operating systems, Linux doesn’t try to hide the important bits from you—it gives you full control of your computer. But to truly master Linux, you need to understand its internals, like how the system boots, how networking works, and what the kernel actually does. In this third edition of the bestselling How Linux Works, author Brian Ward peels back the layers of this well-loved operating system to make Linux internals accessible. This edition has been thoroughly updated and expanded with added coverage of Logical Volume Manager (LVM), virtualization, and containers. You'll learn:How Linux boots, from boot loaders to init (systemd)How the kernel manages devices, device drivers, and processesHow networking, interfaces, firewalls, and servers workHow development tools work and relate to shared librariesHow to write effective shell scriptsYou’ll also explore the kernel and examine key system tasks inside user-space processes, including system calls, input and output, and filesystem maintenance. With its combination of background, theory, real-world examples, and thorough explanations, How Linux Works, 3rd Edition will teach you what you need to know to take control of your operating system.NEW TO THIS EDITION:Hands-on coverage of the LVM, journald logging system, and IPv6Additional chapter on virtualization, featuring containers and cgroupsExpanded discussion of systemdCovers systemd-based installations},
  isbn = {978-1-7185-0040-2},
  langid = {english},
  pagetotal = {464}
}

@book{warren2012,
  title = {Hacker's {{Delight}}},
  author = {Warren, Henry},
  date = {2012-09-25},
  edition = {2nd edition},
  publisher = {Addison-Wesley Professional},
  location = {Upper Saddle River, NJ},
  abstract = {In Hacker’s Delight, Second Edition, Hank Warren once again compiles an irresistible collection of programming hacks: timesaving techniques, algorithms, and tricks that help programmers build more elegant and efficient software, while also gaining deeper insights into their craft. Warren’s hacks are eminently practical, but they’re also intrinsically interesting, and sometimes unexpected, much like the solution to a great puzzle. They are, in a word, a delight to any programmer who is excited by the opportunity to improve. Extensive additions in this edition include A new chapter on cyclic redundancy checking (CRC), including routines for the commonly used CRC-32 code A new chapter on error correcting codes (ECC), including routines for the Hamming code More coverage of integer division by constants, including methods using only shifts and adds Computing remainders without computing a quotient More coverage of population count and counting leading zeros Array population count New algorithms for compress and expand An LRU algorithm Floating-point to/from integer conversions Approximate floating-point reciprocal square root routine A gallery of graphs of discrete functions Now with exercises and answers .},
  isbn = {978-0-321-84268-8},
  langid = {english},
  pagetotal = {512}
}

@online{WebApplicationInterface,
  title = {Web {{Application Interface}} :: {{Yesod Web Framework Book- Version}} 1.6},
  url = {https://www.yesodweb.com/book/web-application-interface},
  urldate = {2025-02-11},
  file = {/home/hippoid/fun/zotero/storage/DXDA8GSK/web-application-interface.html}
}

@book{webber2011,
  title = {Formal {{Language}}: {{A Practical Introduction}}},
  shorttitle = {Formal {{Language}}},
  author = {Webber, Adam Brooks},
  date = {2011-08-25},
  publisher = {Franklin, Beedle \& Associates Incorporated},
  location = {Wilsonville, Or},
  abstract = {This book has two major goals. The first is to help you understand and appreciate the beautiful and enduring ideas of formal language. These ideas are the birthright of all computer scientists, and they will profoundly change the way you think about computation. They are not only among the most beautiful, but also among the most useful tools in computer science. They are used to solve problems in a wide variety of practical applications, and they are especially useful for defining programming languages and for building language systems. The second purpose of this book is to help you develop a facility with these useful tools. Our code examples are in Java, but they are not particularly Java-centric and should be accessible to any programmer. There is also a third major reason to study formal language, one that is not a primary focus of this book: to learn the techniques of mathematical proof. When you are learning about formal language, it can also be a good time to learn proof techniques, because the subject is full of theorems to practice on. But this book tries to make the beautiful and useful ideas for formal language accessible to students at all levels of mathematical interest and ability. To that end, although the book presents and discusses many simple proofs, it does not try to teach advanced proof techniques. Relatively few of the exercises pose challenging proof problems. Those planning graduate-level study of theoretical computer science would be well advised not to rely exclusively on this book for that kind of training.},
  isbn = {978-1-59028-197-0},
  langid = {english},
  pagetotal = {400}
}

@book{whittington2012pdf,
  title = {{{PDF}} Explained},
  author = {Whittington, John},
  date = {2012},
  publisher = {O'Reilly Media}
}

@misc{wiki:haskell:monad-transformers,
  title = {Monad Transformers Explained — {{HaskellWiki}},},
  author = {{HaskellWiki}},
  date = {2012},
  url = {https://wiki.haskell.org/index.php?title=Monad_Transformers_Explained&oldid=54598}
}

@book{winkle2019,
  title = {Hands-{{On Network Programming}} with {{C}}: {{Learn}} Socket Programming in {{C}} and Write Secure and Optimized Network Code},
  shorttitle = {Hands-{{On Network Programming}} with {{C}}},
  author = {Winkle, Lewis Van},
  date = {2019-05-13},
  publisher = {Packt Publishing},
  location = {Birmingham Mumbai},
  abstract = {A comprehensive guide to programming with network sockets, implementing internet protocols, designing IoT devices, and much more with CKey FeaturesApply your C and C++ programming skills to build powerful network applicationsGet to grips with a variety of network protocols that allow you to load web pages, send emails, and do much moreWrite portable network code for Windows, Linux, and macOSBook DescriptionNetwork programming enables processes to communicate with each other over a computer network, but it is a complex task that requires programming with multiple libraries and protocols. With its support for third-party libraries and structured documentation, C is an ideal language to write network programs.Complete with step-by-step explanations of essential concepts and practical examples, this C network programming book begins with the fundamentals of Internet Protocol, TCP, and UDP. You'll explore client-server and peer-to-peer models for information sharing and connectivity with remote computers. The book will also cover HTTP and HTTPS for communicating between your browser and website, and delve into hostname resolution with DNS, which is crucial to the functioning of the modern web. As you advance, you'll gain insights into asynchronous socket programming and streams, and explore debugging and error handling. Finally, you'll study network monitoring and implement security best practices.By the end of this book, you'll have experience of working with client-server applications and be able to implement new network programs in C.The code in this book is compatible with the older C99 version as well as the latest C18 and C++17 standards. You'll work with robust, reliable, and secure code that is portable across operating systems, including Winsock sockets for Windows and POSIX sockets for Linux and macOS.What You Will Learn: Uncover cross-platform socket programming APIsImplement techniques for supporting IPv4 and IPv6Understand how TCP and UDP connections work over IPDiscover how hostname resolution and DNS workInterface with web APIs using HTTP and HTTPSExplore Simple Mail Transfer Protocol (SMTP) for electronic mail transmissionApply network programming to the Internet of Things (IoT)Who this book is forIf you're a developer or a system administrator who wants to get started with network programming, this book is for you. Basic knowledge of C programming is assumed.},
  isbn = {978-1-78934-986-3},
  langid = {english},
  pagetotal = {478}
}

@book{wolfram2021,
  title = {Combinators: {{A Centennial View}}},
  shorttitle = {Combinators},
  author = {Wolfram, Stephen},
  date = {2021-06-17},
  publisher = {Wolfram Media, Inc.},
  location = {Champaign},
  abstract = {Combinators have inspired ideas about computation ever since they were first invented in 1920, and in this innovative book, Stephen Wolfram provides a modern view of combinators and their significance. Informed by his work on the computational universe of possible programs and on computational language design, Wolfram explains new and existing ideas about combinators with unique clarity and stunning visualizations, as well as provides insights on their historical connections and the curious story of Moses Schönfinkel, inventor of combinators. Though invented well before Turing machines, combinators have often been viewed as an inaccessibly abstract approach to computation. This book brings them to life as never before in a thought-provoking and broadly accessible exposition of interest across mathematics and computer science, as well as to those concerned with the foundations of formal and computational thinking, and with the history of ideas.  ContentsPreface Combinators: A Centennial View: Ultimate Symbolic Abstraction • Computing with Combinators • A Hundred Years Later... • Combinators in the Wild: Some Zoology • Visualizing Combinators • Updating Schemes and Multiway Systems • The Question of Evaluation Order • The World of the S Combinator • Causal Graphs and the Physicalization of Combinators • Combinator Expressions as Dynamical Systems • Equality and Theorem Proving for Combinators • Lemmas and the Structure of Combinator Space • Empirical Computation Theory with Combinators • The Future of Combinators • Historical \& Other NotesCombinators and the Story of Computation The Abstract Representation of Things • What Is Mathematics―and Logic―Made Of? • Combinators Arrive • What Is Their Mathematics? • Gödel's Theorem and Computability • Lambda Calculus • Practical Computation • Combinators in Culture • Designing Symbolic Language • Combinators in the Computational Universe • Combinators All the Way Down? Where Did Combinators Come From? Hunting the Story of Moses Schönfinkel December 7, 1920 • Who Was Moses Schönfinkel? • The Beginning of the Story • Going to College in Odessa • Göttingen, Center of the Mathematical Universe • Problems Are Brewing • The 1924 Paper • The "1927" Paper • To Moscow and Beyond... • Other Schönfinkels... • Haskell Curry • Schönfinkel Rediscovered • What Should We Make of Schönfinkel? A Little Closer to Finding What Became of Moses Schönfinkel, Inventor of Combinators1920, 2020 and a \$20,000 Prize: Announcing the S Combinator Challenge Hiding in Plain Sight for a Century? • The Basic Setup • The Operation of the S Combinator Challenge Excerpts from A New Kind of Science (2002)A Bibliography of Combinators Foundational Documents • Books • Surveys \& Summaries • Combinators as Symbolic Expressions • Combinators as Mathematical Constructs • Combinator Computation • Extensions \& Applications • Confusing Issues Index},
  isbn = {978-1-57955-043-1},
  langid = {english},
  pagetotal = {362}
}

@book{woodyiii2022,
  title = {Essential {{Mathematics}} for {{Quantum Computing}}: {{A}} Beginner's Guide to Just the Math You Need without Needless Complexities},
  shorttitle = {Essential {{Mathematics}} for {{Quantum Computing}}},
  author = {Woody III, Leonard S.},
  date = {2022-04-22},
  publisher = {Packt Publishing},
  abstract = {Demystify quantum computing by learning the math it is built onKey Features: Build a solid mathematical foundation to get started with developing powerful quantum solutionsUnderstand linear algebra, calculus, matrices, complex numbers, vector spaces, and other concepts essential for quantum computingLearn the math needed to understand how quantum algorithms functionBook Description: Quantum computing is an exciting subject that offers hope to solve the world's most complex problems at a quicker pace. It is being used quite widely in different spheres of technology, including cybersecurity, finance, and many more, but its concepts, such as superposition, are often misunderstood because engineers may not know the math to understand them. This book will teach the requisite math concepts in an intuitive way and connect them to principles in quantum computing.Starting with the most basic of concepts, 2D vectors that are just line segments in space, you'll move on to tackle matrix multiplication using an instinctive method. Linearity is the major theme throughout the book and since quantum mechanics is a linear theory, you'll see how they go hand in hand. As you advance, you'll understand intrinsically what a vector is and how to transform vectors with matrices and operators. You'll also see how complex numbers make their voices heard and understand the probability behind it all.It's all here, in writing you can understand. This is not a stuffy math book with definitions, axioms, theorems, and so on. This book meets you where you're at and guides you to where you need to be for quantum computing. Already know some of this stuff? No problem! The book is componentized, so you can learn just the parts you want. And with tons of exercises and their answers, you'll get all the practice you need.What You Will Learn: Operate on vectors (qubits) with matrices (gates)Define linear combinations and linear independenceUnderstand vector spaces and their basis setsRotate, reflect, and project vectors with matricesRealize the connection between complex numbers and the Bloch sphereDetermine whether a matrix is invertible and find its eigenvaluesProbabilistically determine the measurement of a qubitTie it all together with bra-ket notationWho this book is for: If you want to learn quantum computing but are unsure of the math involved, this book is for you. If you've taken high school math, you'll easily understand the topics covered. And even if you haven't, the book will give you a refresher on topics such as trigonometry, matrices, and vectors. This book will help you gain the confidence to fully understand quantum computation without losing you in the process!},
  isbn = {978-1-80107-314-1},
  langid = {english},
  pagetotal = {252}
}

@online{zotero-105,
  title = {Celebratio {{Mathematica}} — {{Albert}} — {{Cryptography}}},
  url = {https://celebratio.org/Albert_AA/article/455/},
  urldate = {2024-05-20},
  file = {/home/hippoid/fun/zotero/storage/TMLTMK2I/455.html}
}

@online{zotero-269,
  title = {{{OPNsense}} Documentation},
  url = {https://docs.opnsense.org/index.html},
  urldate = {2024-08-24},
  file = {/home/hippoid/fun/zotero/storage/J73LL9TY/index.html}
}

@online{zotero-312,
  title = {{{IPv4 Multicast Address Space Registry}}},
  url = {https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xhtml},
  urldate = {2024-09-05},
  file = {/home/hippoid/fun/zotero/storage/3ZJUUXLE/multicast-addresses.html}
}

@online{zotero-324,
  title = {{{MiniKanren}}: Logic Programming in {{Scheme}}},
  url = {https://docs.racket-lang.org/minikanren/index.html},
  urldate = {2024-09-18},
  file = {/home/hippoid/fun/zotero/storage/BV5VI22R/index.html}
}

@online{zotero-326,
  title = {Ds-Kanren},
  url = {https://hackage.haskell.org/package/ds-kanren},
  urldate = {2024-09-20},
  abstract = {A subset of the miniKanren language},
  organization = {Hackage},
  file = {/home/hippoid/fun/zotero/storage/6HEEKQBV/ds-kanren.html}
}

@online{zotero-336,
  title = {{{CSE341 Lecture Notes}} 6: {{Polymorphic}} Type Inference in {{ML}}},
  url = {https://courses.cs.washington.edu/courses/cse341/04wi/lectures/06-ml-polymorphic-types.html},
  urldate = {2024-10-01},
  file = {/home/hippoid/fun/zotero/storage/G2PD4BTM/06-ml-polymorphic-types.html}
}

@video{zotero-344,
  entrysubtype = {video},
  title = {Hey {{Kid}}},
  url = {https://www.youtube.com/shorts/RR1cy5vDKJM},
  urldate = {2024-10-12},
  abstract = {I made a coffee company and this is my first commercial enjoy},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/24PCRLYC/RR1cy5vDKJM.html}
}

@online{zotero-346,
  title = {{{QuickCheck}}: {{An Automatic Testing Tool}} for {{Haskell}}},
  url = {https://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html},
  urldate = {2024-10-12},
  file = {/home/hippoid/fun/zotero/storage/VQY8CSCB/manual.html}
}

@online{zotero-353,
  title = {{{GitHub}} - Well-Typed/Gp-Zurihac-2020: {{Repository}} Accompanying the {{ZuriHac Advanced Track}} Lecture on {{Datatype-Generic Programming}}},
  url = {https://github.com/well-typed/gp-zurihac-2020},
  urldate = {2024-10-29},
  file = {/home/hippoid/fun/zotero/storage/G9HC2QZA/gp-zurihac-2020.html}
}

@online{zotero-375,
  title = {Pandoc for {{Haskell Hackers}}},
  url = {https://johnmacfarlane.net/BayHac2014/#/},
  urldate = {2024-11-25},
  file = {/home/hippoid/fun/zotero/storage/8DCEIMQG/BayHac2014.html}
}

@online{zotero-379,
  title = {Pandoc - {{Using}} the Pandoc {{API}}},
  url = {https://pandoc.org/using-the-pandoc-api.html},
  urldate = {2024-12-03},
  file = {/home/hippoid/fun/zotero/storage/W8VEGEEK/using-the-pandoc-api.html}
}

@online{zotero-381,
  title = {Lsp - {{Neovim}} Docs},
  url = {https://neovim.io/doc/user/lsp.html},
  urldate = {2024-12-05},
  file = {/home/hippoid/fun/zotero/storage/8FSU3SWD/lsp.html}
}

@online{zotero-383,
  title = {Building and {{Debugging C}}++ in {{Neovim}}},
  url = {https://igorlfs.github.io/neovim-cpp-dbg},
  urldate = {2024-12-14},
  langid = {english},
  file = {/home/hippoid/fun/zotero/storage/9HPH55JI/neovim-cpp-dbg.html}
}

@online{zotero-78,
  title = {Binius: Highly Efficient Proofs over Binary Fields},
  url = {https://bafybeidy7lrjeghrpsg3z7i5yrpfekyo6d3jetv6qofgtixsjumdthetw4.ipfs.dweb.link/general/2024/04/29/binius.html},
  urldate = {2024-05-07},
  file = {/home/hippoid/fun/zotero/storage/XUZI7CVP/binius.html}
}
